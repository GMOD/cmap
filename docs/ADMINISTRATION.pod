=head1 TITLE

CMap Administration and Data Curation

=head1 VERSION

$Revision: 1.1 $

This document is intended to help you understand how to use the data
curation tools provided with CMap.  There are two tools you will use:
the "cmap_admin.pl" command-line interface and the web-base
administration interface.  The first is used for all long-running
processes that aren't practical to address over the HTTP protocol.  It
employs a "wizard"-like approach to accomplishing various tasks by
asking the curator a series of closed-ended questions and performing
the desired action using the answers provided.  The web admin tool is
meant to provide a point-and-click interface for performing the more
mundane administrative tasks or for viewing the data.  Lastly, you can
customize many aspects of CMap by altering the your "cmap.conf" file.
All of this is discussed in further detail in this document.

=head1 1. STARTING OUT

If you've just installed CMap, then your database is probably
completely empty.  (Of course, a small but complete dataset is
provided in the "data" directory, but the database for your own data
will be empty.)  So let's start by discussing what you need to do to
get a usable installation with your data.  This document assumes that
you've already been through all the steps described in the
INSTALL.pod document, so you should be able to pull up the web-based
admin tool by pointing your browser to
"http://your.host.name/cgi-bin/cmap/admin" (or where ever you have
installed it).  Depending on whether or not you decided to protect
that URL, you may have to enter a username and password when prompted
by your browser.

=head1 2. WEB-ADMIN TOOL

The home page for the web-based CMap administration tool has links for
all the different actions you can take:

=over 4

=item *   Create New Map Set

=item *   View Map Sets

=item *   View Species

=item *   View Map Types

=item *   View Feature Types

=item *   View Correspondence Evidence Types

=item *   View Database Cross-References

=item *   Search for a Feature

=item *   View Color Palette

=item *   Exit to Map Viewer

=back

Each link is self-explanatory.  In addition to the above links, you
will also see the current data source to which you are connected.
You may configure CMap to connect to different distinct datasources;
see the section "CONFIGURING DATABASE CONNECTION(S)" later for more
information on this.  If you have configure more than one datasource,
you will also see a drop-down control allowing you to connect to a
different datasource.

On each "View" page, you have access to edit and delete the
information there.  Each page will be discussed in detail later.  For
the moment, let's just focus on what you need to import your first
data set.  To do that, you'll need to first set up the species and map
types.

=head1 3. SETTING UP SPECIES

Click on "View Species" from the home page of the web-admin tool.  As
you currently have no species to view, you should see the message "No
species to show."  To add a new species, click on the "Create New
Species" link at the top of the page.  You should now see a page
entitled "Species Create" with a form for the following fields:

=over 4

=item * Acc. ID (opt.): 

The accession ID

=item * Common Name: 

This is the non-scientific name of the species. This field will be
used most often as a prefix to the map names. If you plan on having
more than one species that could go by the same common name (e.g., two
species of "wheat"), you should differentiate them here, too.

=item * Full Name: 

This should be the full genus and species name for the species

=item * Display Order (opt.): 

This is the order in which you'd like this species to appear in
listings, e.g., on Gramene we prefer "rice" to appear before other
species as it is our model organism

=back

B<Note:> All the "accession_id" columns in the CMap tables act the
same.  They are all character fields, so they will accept any
combination of numbers and letters you care to use. Please don't use
spaces or characters outside the ranges "a-z," "A-Z," "0-9" or dashes
("-") as this will likely only cause you headaches. It is also not
necessary to explicitly assign any accession IDs.  While they *are*
required by the database, there is code in place to ensure that the
accession ID is set to the primary ID of the record if the accession
ID is empty. Once your accession IDs have been established and
publicized, they should never change.

The fields marked "(opt.)" do not require you to enter a value.  If
one is really required for the database (e.g., the "accession_id"),
then a reasonable default will be provided (e.g., the primary key
value for accession IDs).  When you are done, hit the "Submit" button.
If there are errors, they will be reported to you and you will have to
correct them before submitting again.  If there are no errors, your
entry will be accepted and you will be returned to the "Species View"
page.

B<Note:> On all the pages with clickable column headers, clicking on
the column names will resort the data by the column.

If you are unhappy with any of the data you see, you can click on the
"Edit" link of the record that displeases you and correct the faults.
If you have created an unnecessary species, you can delete it by
clicking on the "Delete" link.  After confirming that you really wish
to delete the species, it will be *permanently* removed from the
database.  

B<Note:> There is no "undo" function for deletes, so be sure whenever
you decide to remove an object from the database that you really mean
it. When an object has other objects that rely on it (e.g., species
records are linked to map sets), you will not be allowed to remove the
object until all dependencies to it are removed (e.g., no more map
sets use the species you want to remove).

Once you've set up all the species you wish to have in your database,
click on the "Home" link in the upper-left corner to return to the
web-admin home page.

B<Note:> Throughout the admin interface, the "create" and "edit" pages
for any object (e.g., species, map types, map sets, etc.) have the
same fields in the same order with the same restriction. If this
document only mentions the "create" or "edit" page for an object, rest
assured that the complementary page works the same as the one
described.

=head1 4. SETTING UP MAP TYPES

Click on "View Map Types" from the home page of the web-admin tool.
As you currently have no map types to view, you should see the message
"No map types to show."  To add a new species, click on the "Create
New Map Types" link at the top of the page.  You should now see a page
entitled "Map Type Create" with a form for the following fields:

=over 4

=item * Map Type: 

This is the name of the map type. Common values are "Genetic,"
"Physical," "Cytogenic," "Sequence," etc. It doesn't matter at all
what you call your map types, so use whatever names carry the most
significance for your research community.

=item * Map Units: 

The units of measurement for this type of map.  This text will display
at the bottom of non-relational maps, so it's best to keep this short,
like "cM" for "centimorgans."

=item * Is Relational Map Only: 

This field determines whether or not maps of this type can stand alone
(like most genetic maps) or if they are a special kind of map set that
CMap calls "relational," meaning that the maps can only be shown *in
relation to* some other map (of the first, "non-relational" kind, no
less :-). Examples of this include physical fingerprint contig maps
(FPC), QTLs, and haplotypes. These maps are usually composed of many
smaller fragments that have some correspondences to other maps. As
such, they are just drawn directly across from and to a size relative
to the distance their correspondences cover on the reference map. To
see how "relational" maps are rendered, please visit the CMap
installation on the Gramene website (http://www.gramene.org/cmap).
From there, inspect the Matrix and choose a comparison to any map of
the type "Physical." Drill down until you are taken to the viewer
showing the reference map (probably some "genetic" map) and the
physical contigs. Notice how their sizes vary according to the
correspondences to the genetic map.

For more explanation of relational maps, please see the "admintut."

=item * Display Order: 

Like the same field in the "species" table, this determines the order
that maps of this type will be displayed, e.g., on Gramene it is
preferred that "Genetic" maps be listed before "Physical" which should
come before "Sequence" (even though a simple alphabetical listing
could accomplish the same thing in this case).

=item * Shape: 

This determines how maps of this type will be drawn. You can choose to
make maps of each type visually distinct by specifying different
shapes and colors. There are three choices for shape: box, dummbell
and I-beam. A box will be trimmed in black and will be filled with the
color of your choice (or a reasonable default). A dumbbell or an
I-beam will be rendered only in the map's color (no trim).

=item * Width (opt.): 

How wide a map will be drawn.

=item * Color (opt.): 

The color a map will be drawn.

=back

When you have filled in all the required values, press "Submit."  If
there are errors, you will have to correct them;  otherwise you will
be taken to the "Map Types View" page where your new map type will be
listed.  

Once you've set up all the map types you wish to have in your
database, click on the "Home" link in the upper-left corner to return
to the web-admin home page.

=head1 5. CREATING FEATURE TYPES

Although it's not imperative to create feature types before importing
data, now is a good time to address them.  Choose the "View Feature
Types" link from the web admin home page and then click the "Create
New Feature Type" link to take you to the page entitled "Feature Type
Create."  From here you can fill in the following fields:

=over 4

=item * Acc. ID (opt.): 

The accession ID

=item * Feature Type: 

The name of the feature type (e.g., "Marker" or "BAC")

=item * Shape: 

The shape to use when drawing the feature.  Here is a short
description of the shapes and what they're best used for:

=over 4

=item - line: 

This a horizontal line just wider than the map's width intended to
represent single-point features (e.g., SNPs or markers).  If the
feature has a length (a defined stop), the line is drawn at the =item
*midpoint* of the feature. This shape is the most generic and has the
least tendency to look busy on very crowded maps. It is mostly
intended to represent single-point features, but is also useful for
spanning features when you aren't necessarily concerned with showing
the span.

=item - in-triangle:

Like the "line," this is intended to represent single-point features
or just the beginning of a spanning feature (e.g., the beginning of an
insertion). "In" here means pointing at the map, which may mean
pointing right or left depending on the side of the map which features
are being drawn.

=item - out-triangle: 

Exactly like the "in-triangle," only pointing away from the map. These
two glyphs were added for the common representation of insertions and
deletions.

=item - box: 

Creates an open (unfilled) box that straddles the map. While it's
possible to place a box in a lane other than "1" (i.e., there's no
code in place to stop you), it really doesn't look very good.  This
shape was really intended just to represent infrequently occuring
features, like a centromere. The boxes get progressively larger as
they start to collide and are quite confusing when there are many. Use
sparingly.

=item - dumbbell: 

This is a spanning shape intended for features with both a start and
stop position. The dumbbell is fairly small and floats in mini-lanes
within the drawing lane. When a feature with no length (a single-point
feature) is drawn with a dumbbell, it renders as a dot (just the
circle on the end), which could be confusing to users.

=item - span: 

Like half a box, the "span" is a three-sided figure made of straight
lines that was intended for spanning features. Looks very odd when
applied to single-point feature.

=item - up-arrow: 

Another spanning shape, this is a straight line with an arrowhead
pointing towards the top of the image. It "floats" like the dumbbell.

=item - down-arrow: 

Exactly like the "up-arrow," only with the arrowhead pointing towards
the bottom of the image.

=item - double-arrow: 

Like the "up-arrow" and "down-arrow," except with arrowheads on both
ends.

=item - filled-box: 

Another spanning feature which floats (like the dumbbell), this is a
filled-in rectangle (trimmed in black).

=back

=item * Color: 

The color the feature will be drawn.

=item * Drawing Lane: 

A positive integer defining the "lane" where the feature will be
drawn. The idea was taken from Gbrowse's "tracks," this allows you the
ability to segregate feature types into visually distinct vertical
areas. Feature types which share the same lane will all be distributed
before feature types in the next highest lane. The lower the number
for the lane, the closer to the map the feature will be drawn.

Lanes are not absolute, they are only used to sort the features on
a map;  therefore, if you have only "Centromeres" and "Markers" in
lane #1, on any map with either of those types of features, they will
be drawn =item *on* the map;  on any map without those types, the
feature type with the next highest lane number will be drawn =item
*on* the map.  The same is true as you move into higher lanes;  if the
lanes move like "1," "4," "7," you will have only 3 lanes with no
gaps.

=item * Drawing Priority: 

A positive integer which determines the order in which feature types
within the lane are drawn. The lower the number for the priority, the
sooner the feature will be drawn in the lane.

=back

=head1 6. CREATING A NEW MAP SET

Once you have species and map types set up, you are ready to create a
new map set.  Everything in CMap is designed to be generic, so a "map
set" is simply a collection of maps.  What you group together is
entirely up to you.  On Gramene, map sets tend to correspond to
published studies of organisms and contain maps that represent
chromosomes, linkage groups, FPC contigs, and such.  As the database
design allows only one species and one map type to be linked to a map
set, it is best to keep these narrowly defined.

=head2 6.1 USING THE WEB ADMIN TOOL TO CREATE A MAP SET

To create a new map set, click on the "Create New Map Set" link from
the admin home page or from the "Map Sets View" page.  If you have
failed to set up species or map types, you will be prompted to do so
before continuing.  You will see the following fields:

=over 4

=item * Map Set Name: 

This is the canonical name for the map set. It is expected that this
name will be quite long and informative, e.g., "Cornell Avena
atlantica/A. hirtula RFLP 1995," but it doesn't have to be. Given this
expectaion, the name that appears in this fields won't actually show
up all that often. Mostly, it will show up only on the "map set info"
page.

=item * Short Name: 

This is the short version of the map set name, e.g., "Cornell Diploid
1995" for the name above. This name is what will be used in all the
drop-down boxes and for the map titles on the images and in the
matrix. The field is limited to 30 characters.

=item * Acc. ID (opt.): 

The accession ID

=item * Species: 

This is the one (and only one) species with which the map set is
associated.

=item * Map Type: 

The type of maps that are contained in this set.

=item * Published On: 

The date on which the study was published. This is used to sort the
map sets. Most date formats will be understood and converted into the
proper format for your database.

=item * Display Order: 

The order in which you'd prefer this map set to sort above others.
Used before other sorting criteria.

=item * Can Be Reference Map: 

This determines whether or not the map of this map set can serve as
reference maps, i.e., as a starting point in a user's search, either
via the main map viewer or the feature search.

=item * Is Enabled: 

Determines whether or not this map set will appear to end users. This
is intended as a convenient way to temporarily hide some data without
having to remove it entirely from the database.

=item * Remarks (opt.): 

A free-form text field for describing the map set.

=item * Shape (opt.): 

The shape that maps of this set will be drawn.

=item * Width (opt.): 

The width that maps of this set will be drawn.

=item * Color (opt.): 

The color that maps of this set will be drawn.

=back

=head2 6.2 USING THE cmap_admin.pl TOOL TO CREATE A MAP SET

You can also create a new map set by using the "cmap_admin.pl" tool.
There are only a couple of functions that exists in both tools, and
this one was only added to cmap_admin.pl in order to make importing
new data sets more convenient.  You can only specify the species, map
type, and give the long and short name for the map set.  Everything
else about the map must be edited using the web admin tool.  

To create a new map set with cmap_admin.pl, start the script and
choose the "Create new map set" option.  Answer the questions
appropriately and confirm your decision.  If you see no errors, the
map set was successfully created.

B<Note:> When using cmap_admin.pl, questions which have only one
choice are automatically answered by the tool. In the above example,
if you had only one species in the database, cmap_admin.pl will not
ask you which species to associate with the new map set. There can
only be one answer, so it answers the question automatically.

=head2 6.3 VIEWING NEW MAP SET

Once you have successfully created a map set, you will be taken to the
view of that map set.  You should see the data that you entered and
that the set currently has no maps associated with it.  You can either
create each map for the map set individually or you can import the
data for the map set.  Most likely, you will want to do the latter, so
that is the next section.

=head1 7. IMPORTING MAP DATA

Using the cmap_admin.pl, you can import a tab-delimited file
containing the data for a map set with the following fields and
datatypes:

=over 4

=item * map_name (character(64)) [REQUIRED]: 

The name of the map (AKA "linkage group," "chromosome," etc.).

=item * map_accession_id (character(20)): 

The accession ID of the map.

=item * map_display_order (integer): 

The order in which to display the map.

=item * map_start (double(8,2)): 

The start position of the map.

=item * map_stop (double(8,2)): 

The stop position of the map.

=item * feature_accession_id (character(20)): 

The accession ID of the feature.

=item * feature_name (character(32)) [REQUIRED]: 

The name of the feature.

=item * feature_alt_name (character(32)) [DEPRECATED]: 

The alternate name of the feature;  deprecated in lieu of
"feature_aliases" but still     supported.

=item * feature_aliases (character(255) each): 

Any number of comma-delimited aliases, each of which can be a maximum
of 255 characters

=item * feature_start (double(8,2)) [REQUIRED]: 

The starting position of the feature on the map.

=item * feature_stop (double(8,2)): 

The ending position of the feature on the map.

=item * feature_type (character(32)) [REQUIRED]: 

The feature's type.

=item * feature_dbxref_name (character(32)) [DEPRECATED]: 

The name of the database cross reference;  deprecated in favor of
"feature_attributes."

=item * feature_dbxref_url (character(200)) [DEPRECATED]: 

The URL of the database cross reference;  deprecated in favor of
"feature_attributes."

=item * feature_attributes: 

A semi-colon-delimited list of feature attributes.

=item * is_landmark ("1" or "0"): 

Whether or not the feature should be marked as a landmark feature
(allowing it to be labelled when a user chooses "Landmarks" for the
"Label Features" option).

=back

For a more thorough treatment of these fields, read the "import_tab" 
section of "perldoc Bio::GMOD::CMap::Admin::Import."

The first line of the file should be the tab-separated names of the
fields in whatever order you're supplying them (the order of fields is
not important).  You should use the above names for the fields, but
you can use spaces and capitalization for the column names, if you
like, as spaces will be converted to underscores and the names
lowercased (e.g. "Feature Alt Name" will become "feature_alt_name").

If the fields "map_start" and "map_stop" are not supplied, then the
start and stop positions of the map will be determined after importing
all the features by selecting the MIN and MAX start and stop positions
from the "cmap_feature" table.

Use the "cmap_admin.pl" script to bring in your correctly formatted
data.  Run the script, optionally passing your data file as an
argument, like so:

  $ cmap_admin.pl my_groovy_data.dat

If you pass a file as an argument, you will be asked to confirm that
that is the file you want to use.  If you answer "no" or did not pass
a file, then you will be asked to locate the file containing your
data.  Type in the path to the file (noticing that you can use tab
completion), or type "q" to exit file selection and return to the
"Main Menu."  Once you've found your file, you'll need to tell the
tool which map set the data corresponds to.  First choose the map type
and then the species of the map set, then the map set itself.  Lastly,
you will need to confirm your choices.  If all goes well, you should
see a lot of lines fly by giving you the step-by-step progress, the
message "Done," and then you will be returned to the "Main Menu."  A
complete log of the actions taken by the script will be stored in a
file called "cmap_admin_log.X" (where "X" is an incrementing number).
See the docs on cmap_admin.pl (by typing "perldoc cmap_admin.pl") for
more info.

When you import data for an map set that already has data, all
existing maps and features with the same name as maps and features in
your data will be updated.  You also have the option of deleting any
data that isn't updated.  If you choose this "overwrite" option, any
of the pre-existing maps or features that aren't updated will be
deleted as it will be assumed that they are no longer present in the
dataset.  

While the import process is running, it may encounter feature types in
your data which do not exist in the database.  This will certainly be
true if you haven't explicitly defined the feature types you plan to
show on your maps.  When this happens, you will be prompted by
cmap_admin.pl to create the feature type.  This is provided merely as
a convenience to the import process;  you should use the web admin
tool to refine the new feature type (see the section on creating
feature types).

When cmap_admin.pl has successfully finished importing your map data,
you will be returned to the "Main Menu."  From here, choose to "Quit"
as the rest of the functionality will be covered later.

=head1 8. MAKING CORRESPONDENCES

Once you have more than one set of maps in CMap, you can use it for
what it was designed:  showing comparisons.  To do this, you must
first create the correspondences between the features on the maps.
Before you can do this, you'll need to establish the evidence types
that can be used to support the correspondences.

=head2 8.1 CREATING CORRESPONDENCE EVIDENCE TYPES

From the "Home" page of the web admin tool, choose the link "View
Correspondence Evidence Types."  There will be no records to view, so
click on the link "Create New Correspondence Evidence Type."  You
should be on the "Correspondence Evidence Type Create" page where you
can fill in the following fields:

=over 4

=item * Acc. ID (opt.): 

The accession ID

=item * Evidence Type: 

The name for the evidence

=item * Rank: 

The rank of the evidence relative to the others

=item * Line Style: 

How lines representing this evidence type will be drawn (not currently
supported)

=item * Color (opt.):  

The color that lines representing this evidence type will be drawn

=back

A single correspondence can be supported by any number of evidence
types, so it is necessary that these be ranked from "1" to N (where
lower numbers have precedence over higher).  When multiple records
support a correspondence, only the highest ranking evidence will be
used when determining how to draw the correspondence line.  If you
intend to use cmap_admin.pl tool to create correspondences for you
based on simple name/feature type comparisons, you should create a
special evidence to use just for that purpose (e.g., with the name
"Automated name-based" or something similar to flag it as a
machine-created/non-curated correspondence).

=head2 8.2 CREATING CORRESPONDENCE RECORDS

Once you have evidence types, you can create the correspondence
records.  It might be helpful to you to inspect "cmap-schema.png" and
"cmap-graph.png" images in the "docs" directory that visualize the
CMap tables and their relationships.  The tables involved are:

=over 4

=item * cmap_feature

=item * cmap_feature_correspondence

=item * cmap_correspondence_lookup

=item * cmap_correspondence_evidence

=item * cmap_evidence_type

=back

For descriptions of these tables, look at the "CODE_OVERVIEW.pod" document
in the "docs" directory.

There are three ways to create correspondences:

=over 4

=item 1 

Create each by hand using the web admin tool.  To do this, locate a
feature on a map by:

A)  "View" a map set, then "view" a map, then "view" the feature

B)  Click on "Search for a Feature" and find the feature by name

Once you have located a feature and have navigated to the "View
Feature" page, click on the link to "Add Correspondence." This will
take you to the "Feature Correspondence Create" page where you can
search for the other feature in the relationship. When you have
located both features, you will be presented a form with the following
fields:

=over 4

=item * Evidence Type: 

The evidence type which supports this correspondence. If you wish to
add more, you can do so after creating the relationship.

=item * Acc. ID (opt.): 

The accession ID

=item * Is Enabled: 

You can hide correspondences by setting this field to "No." The
intention was that a curator could permanently negate a certain
correspondence, e.g., while running the automated name-based
comparison, a feature name "ABD104" is found on two maps so the
correspondence is created; however the curator knows that this is an
invalid correspondence, so, rather than deleted the correspondence, he
sets "Is Enabled" to "No" thereby preventing the correspondence from
being created again in the future (i.e., additional evidence types may
be added to the correspondence, but it won't be enabled -- only the
curator can re-enable a correspondence using the web admin tool).

=back

When you have finished, click the button entitled "Create
Correspondence." If the correspondence is successfully created, you
will be taken to the "View Feature Correspondence" page showing you
the two features, their respective maps and types, and the evidences
supporting this relationship. You can add more evidence types by
clicking the link "Add Evidence." You can also edit and delete
existing evidences by clicking the appropriate links to the right of
them. If you choose to "Edit" a correspondence, you will be
presented a form with the following fields:

=over 4

=item * Acc. ID (opt.): 

The accession ID.

=item * Evidence Type: 

The evidence type.

=item * Score (opt.): 

A floating-point number representing some value associated with the
correspondence, e.g., a BLAST similarity score or an e-value.

=item * Remark (opt.): 

A textual description of the correspondence.

=back

=item 2 

The second method for creating correspondences is to allow CMap to
create a relationship between any two features with the =item *exact*
same name, irrespective of case. To do this, start cmap_admin.pl and
choose "Find name-based correspondences." It's recommended that you
define special evidence type to represent this automated
correspondence. This method is likely to be both incomplete and
overly-optimistic. For example, it will create correspondences between
features called "Centromere," which is probably not desirable. The
name comparisons happen on both the "feature_name" and
"alternate_name" from the "cmap_feature" table. Every feature has each
of these fields compared to those fields for every other feature, so
this can take a long time to complete. For all of its problems, this
can be a good way to get started, and you can pare down the
correspondences from there. This method is the surest as you are
always directly controlling what gets created.

By default, CMap will only compare features of the same type when
making name-based correspondences. You can expand the feature types
considered by adding appropriate lines to "cmap.conf." This is
documented in that file; look for the string "add_name_correspondence"
and follow the directions there.

=item 3

The third way to create correspondences is to import them. Simply
create a tab-delimited file that lists the names (or accession IDs) of
two features and some evidence to support the correspondence.  For
more information on the format of this file, execute the following on
your system:

  perldoc Bio::GMOD::CMap::Admin::ImportCorrespondences

=back

=head1 9. LOADING THE CORRESPONDENCE MATRIX

The data underlying the correspondence matrix is all precomputed.  As
it is an intensive operation on seldom-changing data, it was
determined to cache the pair-wise comparisons of all the maps in the
database into a (very denormalized) table that would subsequently
optimize the many calls for this data.  Because of this, it is
necessary that you remember to reload the matrix whenever you alter
the number of correspondences in the database.  To do this, execute
cmap_admin.pl and choose the "Reload correspondence matrix" option.
The only option is to completely truncate the table and reload it from
scratch.

=head1 10. ESTABLISHING DATABASE CROSS-REFERENCES

See the "attributes-and-xrefs.pod" document.

=head1 11. VIEWING DATA

Now that we've stepped through the basics of setting up the CMap data,
let's go over some of the more basic operations of curating the data.

=head2 11.1 VIEWING ALL MAP SETS

From the home page of the web admin tool, you'll see that you can
"View Map Sets."  Selecting this link takes you to the "Map Sets View"
page where you'll notice three drop-down boxes that you can use to
narrow the selection criteria for the map sets being displayed.  You
can restrict them by species, map type, and whether or not they are
currently enabled.  There is no automatic submission of the form when
you make a choice (as you might want to use more than one criteria),
so be sure to hit "Submit" when you've made your choices.  As noted
before, you can resort the data by clicking on the hyperlinked column
headers.  Every object in the web admin tool can be "viewed,"
"edited," and "deleted" by the respective links which are usually
displayed to the right.  

B<Note:> On pages that may return a large recordset, the data is
"paged" and can be accessed by moving through the pages of the data.
On all these pages, the total number of records is displayed along
with which are currently being shown. This is the section that looks
like "52 records found. Showing 1 to 25." (The page size is determined
by the "max_child_elements" option in the CMap configuration file
which will be discussed shortly.)

=head2 11.2 VIEWING A MAP SET

Choose to "view" one of your map sets.  You'll be taken to the a page
which lists all the data in the map set table as well as a summary of
all the maps associated with the map set.  Notice that you can change
any of the data for the map set by clicking the "edit" link at the
top, or you can delete it from here by choosing the "delete" link.

B<Note:> Deleting an object that has dependencies will cause the
dependencies to be deleted as well. So deleting a map will delete all
the features (which will delete all the correspondences which will
delete all the evidences [but not evidence types] supporting the
correspondence). Deleting a map set deletes all the maps (which
deletes all the features which ... you get the picture).  Basically,
just be very sure that you want to delete something as it can have
cascading effects, and, as noted earlier, THERE IS NO UNDO. There is,
however, the option to dump your data before messing with it giving
you the ability to recover. This is discussed in the POD documentation
of cmap_admin.pl.

=head2 11.3 VIEWING A MAP

Choose to "view" a map to see a summary of all the data in the map
table as well as all the features on the map.  Notice that you can
restrict the features displayed by their feature types.  You can also
search for a feature;  the search option on the map view page
automatically restricts the search to the current map being displayed.

=head2 11.4 EDITING A MAP

If you click on "Edit" while viewing a map, you will be taken to the a
page with the following fields:

=over 4

=item * Map Set: 

Shows you the map set to which the map belongs

=item * Acc ID (opt.): 

The map's accession ID.

=item * Map Name: 

The map's name.

=item * Display Order (opt.): 

The order in which to display the map in relation to the other maps in
the set.  If all the display orders are the same, then the maps will
be sorted alphabetically by their names.

=item * Start: 

The map's starting position.

=item * Stop: 

The map's stop position.

=back

=head2 11.5 VIEWING A FEATURE

Choose to "view" a feature from the map view page.  You'll be
presented with all the data stored in the feature table as well as a
summary of the correspondences the feature has to other features and
the evidence types supporting the correspondences.  You can also add a
new correspondence by clicking "Add Correspondence" and following the
directions discussed earlier in section 8.

=head2 11.6 EDITING A FEATURE

If you click on the "Edit" link from the feature view page, you'll be
presented a form with the following fields:

=over 4

=item * Map: 

The map (described by "species-map set name-map name") on which the
feature occurs;  also a link to return to the overall view of that
map.

=item * Acc ID (opt.): 

The accession ID.

=item * Feature Name: 

The feature's primary name.

=item * Alternate Name (opt.): 

The feature's alternate name.

=item * Feature Type: 

The feature's type.

=item * Is Landmark: 

Whether or not this feature is considerd a "landmark." Landmarks can
be used by the end user to show maps less dense with feature labels,
tagging only those that you as the curator have decided are the most
important.

=item * Start: 

The start position of the feature.  Must be less than the stop
position.

=item * Stop (opt.): 

The ending position of the feature, if any.

=back

=head2 11.7 SEARCHING FOR A FEATURE

Often you will be interested in finding an individual feature in the
database without having to navigate to the map set, then the map, then
page through until you find the feature.  From the home page of the
web admin tool, you can choose the "Search for a Feature" link.  The
"Feature Search" form gives you four fields:

=over 4

=item * Name: 

The names of the features you wish to search for.  Separate multiple
features with spaces or commas.

=item * Feature Type (opt.): 

You can restrict by feature type the features which will be searched.

=item * Map Acc. ID (opt.): 

You can restrict the search to only those features falling on a
particular map by specifying the maps accession ID.

=item * Field: 

If you have a very large database, you may wish to only search either
the "feature_name" or "alternate_name" field rather than both (which
is the default option).

=back

=head1 12. cmap_admin.pl and cmap_matrix_compare.pl

The cmap_admin.pl and cmap_matrix_compare.pl scripts contain full
documentation in POD format.  To read, please execute "perldoc
<script_name>".

=head1 13. cmap.conf

The "cmap.conf" file is CMap's configuration file.  Everything that
can be customized about CMap is controlled by this file (apart from
thing things which are driven by the data, such as the shapes and
colors of maps and features, etc.).  There are two sections which MUST
be edited by you:  "database" and "template_dir."  For emphasis and
convenience, they are the first two sections of cmap.conf.  

cmap.conf is written in a standard Apache-style configuration file
syntax.  Comments are defined as anything following a hash sign and
are ignored.  Options which are grouped together are in angle brackets
("<>").  Standard options are written in a "Name Value" syntax where
the two are separated by whitespace or an equal sign.  For more
information on the syntax, read the POD for Config::General (by
executing "perldoc Config::General" on your system).

Each configuration setting is documented in comments.  Legal and
default values are listed along with a brief description of the
option.  Except for the "database" and "template_dir" settings, there
is a reasonable default, hardcoded value for every configuration
setting (so you could actually comment out all of the "optional
settings" in the file).

Whenever you make a change to cmap.conf, it will most likely be
necessary for you to restart Apache to see the change if the change
affects something in the viewer.  This is because the configuration
information is cached by each Apache child after the first time it
reads the file.  If you do not restart Apache, you may see the changes
sporadically as some children start up and read the new settings while
older children used their cached settings.

=head2 13.1 CONFIGURING DATABASE CONNECTION(S)

CMap supports multiple data sources, allowing a curator to maintain
distinct databases and view them all in CMap without changing
cmap.conf to point to the one of interest.  If you have only one
database, then you need only defined one "database" section in
cmap.conf.  If, however, you choose to define more than one, you
should be sure to mark one as "is_default."  The parameters are
explained in comments.

=head2 13.2 CONFIGURING TEMPLATE DIRECTORY

The template directory will be properly set if you went through the
"perl Build.PL; ./Build; ./Build install" routine for installing CMap.
The question of where to install the templates and where to install
cmap.conf are both asked during this process, and the values are
placed into the appropriate files.  If you installed everything by
hand (or you ever move your templates), then you'll just need to make
sure that the path is properly set in cmap.conf.

=head2 14. HTML TEMPLATES

All the HTML displayed by the application is contained in the
templates.  These templates are processed by Template Toolkit to
produce the user interface.  For the most part, the files contain
straight-up HTML and can be altered to your heart's content.  You
could probably even pass off the care and feeding of these templates
to a non-technical person (as this was the idea behind having no HTML
in the code).  The only functional parts of the templates lie in
between the many "[% %]" tags, and these are often quite
self-explanatory.  If you can't figure out what to change on your own,
then check out http://www.template-toolkit.com/ for the documentation
(or type "perldoc Template" on your command line).

=head2 15. LINKING IN

Most likely, you'll want to link directly into the CMap viewer from
some other part of your site.  Following is a list of the components
of a CMap URL:

=head3 URI

/cgi-bin/cmap/viewer?

=head3   Required Arguments: 

=over 4

=item * ref_map_set_aid: 

The accession ID of the reference map set

=item * ref_map_aid: 

The accession ID of the reference map

=back

=head3 Optional Arguments:

=over 4

=item * ref_map_start

The start position of the reference map

=item * ref_map_stop

The stop position of the reference map

=item * highlight

A space-less, comma-separated list of feature_names to highlight

=item * label_features

Which features to label, legal values are "none," "all," or "landmarks"

=item * image_size

How large to make the image, legal values are "small," "medium" or "large"

=item * font_size

How large to make the font, legal values are "small," "medium" or
"large"

=item * image_type

The output type of the image, legal value are whatever image libraries
you've installed (usually at least "png" or "jpeg")

=item * feature_types

A space-less, comma-separated list of the accession IDs of the feature
types to display on the map

=item * evidence_types

A space-less, comma-separated list of the accession IDs of the
evidence types to use in drawing correspondence lines

=item * collapse_features

A "1" or "0" ("Yes" or "No," respectively) indicating whether to
collapse spanning features of the same type and with the same
coordinates to overlap rather than pushing out

=item * min_correspondences

The minimum number of correspondences to require between two maps

=item * comparative_maps

See below for a full discussion of how to
    construct this argument

=back

To link to just one map, make it the "reference" map like so by using
the accession IDs for the map's parent "set" and the map itself.
Here's an example showing just one map on Gramene, showing all the
feature labels and highlighting the feature "RM9":

  http://www.gramene.org/db/cmap/viewer?ref_map_aid=13&ref_map_set_aid=cu-dh-2001&highlight=RM9&label_features=all

To include some number of comparative maps, you provide them in the
"comparative_maps" argument, which is a single structured string that
lists all the comparative maps and their placement relative to the
reference map.  Here I'd like to introduce the concept of "slots,"
where the maps (or map sets) fall into a slot moving in positive and
negative direction away from the reference map, which is in slot "0,"
like so:

           -      -        -         -
           |      |        |         |
           |      |      - |  -      |
           |      |      | -  |      |
           |      |      |    |      |
           |      |      |    -      |
           -      -      -           -
          -1      0         1        2
  <----negative --+---------positive----->


The above drawing is representative of Gramene's genetic maps in slots
-1, 0, and 2, and a physical map in slot 1.  Slots are separated in
the string by URI-escaped colons and the integral parts of the slot by
URI-escaped equal signs.  Like so

    "comparative_maps="
    +
        .-  <slot_number> + 
        |  "%3D" + 
  slot  |  <"map_aid" or "map_set_aid"> + 
        |  "%3D" +
        `-  <map_aid or map_set_aid>
    +

    "%3A"

    +

   <next slot>

Here is a sample that puts "Rice-Cornell RFLP 2001-1" on the left
(slot "-1") and "Rice-CTIR 2000-1" on the right (slot "1"):

    comparative_maps=1%3Dmap_aid%3D423%3A-1%3Dmap_aid%3D1

The middle part of the slot is one of the literal strings
"map_set_aid" or "map_aid."  If you wanted to display just a single
map in a slot, use the string "map_aid" and the map's accession ID.
If you want a whole map set in a slot (e.g., a physical map set like
"I-Map"), then use the string "map_set_aid" and the map set's
accession ID.  You can use the admin interface ("/cmap/admin") to
easily find the accession IDs.

=head1 16. SAMPLE DATA

If you would like to see sample import data for CMap, you can find
many examples from the Gramene site:

  ftp://ftp.gramene.org/pub/gramene/maps

=head1 17. MISCELLANEOUS

In the "docs" directory, you will find two images that might help you
understand the relationships in the CMap tables, "cmap-graph.png" and
"cmap-schema.png," both of which attempt to describe the tables and
fields and their relationships.  These images were automatically
generated from schema definitions via scripts included with
SQL::Translator, a set of modules which grew out of the author's
constant need to make schema changes and quickly replicate them
amongst the different test databases.  The Oracle, PostgreSQL and
Sybase schemas were also generated by SQL::Translator from the MySQL
schema, so if you see room for improvement, please relay them to the
author, prefereably via the SQL:::Translator mailing list.
SQL::Translator is available on CPAN.  For more information, see here:

  http://sqlfairy.sourceforget.net/

=head1 AUTHOR

Ken Y. Clark, kclark@cshl.org

Copyright (c) 2002-4 Cold Spring Harbor Laboratory
