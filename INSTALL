                              CMAP INSTALL

                            $Revision: 1.39 $

1.      QUICK START

If you're pretty experienced with Unix systems administration, here is
the very abbreviated explanation of how to install CMap:

*   Install libpng, libjpeg and libgd
*   Install the database of your choice (MySQL, PostgreSQL, Oracle,
    Sybase, SQLite) create tables with contents of "sql" directory, grant
    appropriate user permissions
*   Install Perl 5.6.1 or greater and Apache (1.3.x or 2.x)
*   Execute "perl Build.PL; ./Build; ./Build install"; install any other
    Perl modules reported missing by the build process
*   Import data (sample data is included)
*   Compare maps

If you need further instructions, read on.  Appendices at the end of
this document cover general interest topics for the UNIX-phobic such
as conventions for building software, etc. 

2.      REQUIREMENTS

There are quite a number of prerequisites to getting CMap running:

    * libgd 
    * a database (MySQL, Oracle 9x, Sybase, PostgreSQL, SQLite) 
    * Perl (5.6.1 or higher)
    * Various CPAN modules
    * Apache (version 1.3.x or 2.x)

Versions prior to 0.10 required mod_perl, but this is no longer the
case.  As such, CMap should actually work with any web server that
supports CGI, not just Apache (e.g., Microsoft IIS, Netscape, etc.).

2.1.    LIBGD

Unfortunately, you're pretty much on your own for installing libgd.
With any luck, you may already have it on your system if you have a
GNU/Linux system.  To check, you could just skip this step for now
and wait to see if the Perl module GD.pm will install properly.  If
it complains that it can't find libgd, then come back here.

Installation of libgd can easily be one of the more frustrating
parts of this installation.  There are a number of dependencies 
including the zlib compression library and whatever image libraries
you want, like JPEG, libpng, and libgif.  Again, you may already
have some of these libraries, so you needn't panic just yet.  One
way to see if you do is to check the directories "/usr/lib" and
"/usr/local/lib" for files that look like "libgd*," "libjpeg*,"
"libpng*," and "libgif*".  If you're using something like RedHat Linux,
you could try the "locate" command for each of these (without the star
as it does wildcard searching on its own).

To install libgd, retrieve the source (tar.gz package) from Paul
Boutell's (author of libgd) website.  Do note that you should be sure
to use the only a 1.x version of libgd with a 1.x version of GD.pm, or
go with 2.x versions of both or you'll get nasty segfaults.  When you
go to build libgd, it should tell you which libraries it can and can't
find.  You definitely won't get far without zlib installed, so you
need to do that first.  Then you can look to see which kinds of files
libgd will be able to write after you run the configure process.
You'll want to be sure that you can at least write JPEG (Joint
Photographic Experts Group) and PNG (Portable Network Graphics)
formats.  You can create GIF if you don't mind worrying about
ridiculous software patents over the LWZ compression algorithm.  PNG
was created to be a completely open and free alternative to GIF.
 
Here are URLs to help you track down everything you need to install libgd:

    * libgd: http://www.boutell.com/gd/
    * libpng: http://www.libpng.org/pub/png/pngcode.html
    * zlib: http://www.gzip.org/zlib/
    * JGEP: http://www.ijg.org/

2.2.    DATABASE

The CMap application relies on a relational database management system
(RDBMS) to store and retrieve data.  If you already have a database
such as MySQL (version 4.x recommended, but 3.23 should be fine) or
Oracle (version 9.x) installed on your system, you can skip ahead to
the next section.  If not and you're doing this on your own, and
aren't a trained DBA, I'd recommend using MySQL
(http://www.mysql.com/) for your database.  It's free, extremely
stable, flexible, and fun.  Another free database that can be highly
recommended is PostgreSQL (http://www.postgresql.org/).  Oracle is
really overkill for such a lightweight application as this because the
code doesn't rely on much of anything from the database except joins
(no transactions, no referential integrity, no stored procedures,
etc.).

Note: Oracle 8.x doesn't support ANSI-standard left joins, so some parts
      of the application will fail. If you can't upgrade, then you can
      alter the few SQL statements that cause problems.

I'll assume that you're going to use MySQL.  If you don't already
have MySQL on your system, you can get everything you need either
from your software vendor or directly from http://www.mysql.com/.
There is a package called "Apache Toolbox" that claims to be able to
install MySQL and Apache and many other things.  It's available at
http://www.apachetoolbox.com/.  Additionally, RedHat Linux offers
RPMs for installing everything you need, Debian GNU/Linux offers
apt-get and their DEB packages, or you can get precompiled binaries
from MySQL for the architecture of your machine.  You may also choose
to install from source, depending on your bent.  There are a number of
freely available GUI (Graphical User Interface) and web-based tools to
help you manage your databases if you want an alternative to MySQL's
command-line tools;  see the MySQL website for more information.  If
you get really stuck, then MySQL AB, the company which develops and
releases MySQL, offers commercial support.

CREATING DATABASE TABLES AND GRANTING PERMISSIONS

Once you've settled on your database of choice and have a working
installation, you need to create the tables that will hold the data for
the comparative maps.  In the "sql" directory, you will find create
scripts for all the databases on which CMap is known to run.

For MySQL, you can do the following to create the database "CMAP" and
grant appropriate permissions to a user "joe" with the password
"foobar":

    $ cd /usr/local/src/cmap-0.XX/
    $ mysql -uroot -p -e 'create database CMAP'
    $ mysql -uroot -p CMAP < sql/cmap.create.mysql
    $ mysql -uroot -p CMAP -e 'grant select, insert, update, delete 
        on CMAP.* to joe@localhost identified by "foobar"'
    $ mysqladmin -uroot -p CMAP flush-privileges

In the above example, you'll be required to type the root password
for MySQL.

Note: This is not the same "root" as your system "root." If you never
      set MySQL's "root" password, then just hit <Enter> at the password
      prompt (though I'd be remiss if I didn't suggest you actually
      protect your MySQL root user with a decent password). Be sure to
      remember the user name and password you'll connect to the database
      with as you'll need to place these values into your "cmap.conf"
      file further into the installation process.

After you've granted the user name access to the system, please test
that the login works by logging in.  For example, if you used the
above, try this:

    $ mysql -ujoe -pfoobar CMAP

If you get in, then all is well.  If not, you should consult your
documentation.  

If you're using something other than MySQL, then you should do the
equivalent of creating the tables described in the create scripts in
the "sql" directory and then granting the proper permissions to
whatever user will connect to your database.

2.3.    PERL 

It would be hard to imagine that a UNIX system wouldn't have some
version of Perl installed.  We need a minimum of Perl 5.6.0 (but 5.6.1
is recommended).  To inspect your version of Perl, type:

    $ perl -v

On my current system, the output looks like this:

    This is perl, v5.8.0 built for i686-linux

    Copyright 1987-2002, Larry Wall

    Perl may be copied only under the terms of either the Artistic 
    License or the GNU General Public License, which may be found 
    in the Perl 5 source kit.

    Complete documentation for Perl, including FAQ lists, should be
    found on this system using `man perl' or `perldoc perl'. If you have
    access to the Internet, point your browser at http://www.perl.com/,
    the Perl Home Page.

If your version of Perl is OK, you can skip ahead to the next section.
If you have anything 5.00503 or older, you'll need to upgrade your
Perl binary.  If you want or need to compile your own Perl, it's
actually fun (in a geeky way), but it will create a lot more work for
you to install all the modules that you'll need for CMap.  And,
obviously, upgrading important system binaries like Perl can cause
unforeseen problems.  If you're using an established machine that is
already being used for other tasks, upgrading Perl could break a lot
of things, so you should discuss this with your sysadmin.  (Of course,
you could always build your own Perl with a PREFIX of something like
"/usr/local/cmap" and install everything you need -- Perl, Apache,
CMap, etc. -- there.  This would then allow you to build everything
fresh without disturbing your existing binaries.  Again, discuss this
with your sysadmin.)  If you are lucky enough to have a free machine
to play with, it's nice to start with a clean slate by building
everything from source.  You should choose what's practical,
convenient, and appropriate for you.

If you want to install a new Perl binary, it only takes a few
minutes to download and build.  Here's one way:

    $ su -
    # cd /usr/local/downloads
    # ncftp ftp.cpan.org
    ncftp> cd /pub/CPAN/src
    ncftp> get perl-5.8.0.tar.gz
    ncftp> quit
    # cd ../src
    # tar zxvf ../downloads/perl-5.8.0.tar.gz
    # cd perl-5.8.0
    # sh Configure -de
    # make
    # make install

For better downloads, go to the CPAN (Comprehensive Perl Archive
Network) website (http://www.cpan.org/) and find a mirror near you.
(A mirror is a machine whose owner is nice enough to provide disk
space and bandwidth so that demand can be distributed among processors
and across geographical areas.  Needless to say, it's usually better
to find a mirror that's near you as long as that machine isn't
overloaded.  Just keep trying different machines until you find one
with a good, fast connection to you.)

2.4.    APACHE

Given that Apache is the most popular web server right now, it's
also likely that you'll already have it installed on your system.
It's usually installed by default on most Linux distributions as well
as Mac OS X.  If you need to install Apache, just go to
http://www.apache.org/ and follow the directions there.  CMap works
just fine with both the 1.3.x or 2.x trees.  If you wish to use
mod_perl, I recommend you stay with the 1.3.x tree of Apache and the
latest version of mod_perl < 1.99 (which is actually the beta version
for mod_perl 2).

As stated earlier, CMap is simply a CGI application and should
therefore run on most any modern web server, including Microsoft IIS.
If you have any problems (or success) using a web server other than
Apache, please contact the author.

2.5.    CPAN MODULES

There are a number of CPAN (modules required by the CMap application.
You will likely need to install these prior to installing the CMap
modules as they are not in the standard Perl distribution.  These
modules are listed in the "requires" section in the Build.PL build
script included with this distribution.  It is possible to install the
CMap application without installing these modules, but you will see a
lot of errors, and, of course, things won't work in the end.  It's
best to use the CPAN shell to install all the modules that Perl
complains about.

Here are the CPAN modules required:

*   Class::Base

*   Config::General

*   Data::Page

*   Data::Pageset

*   DBI

*   DBD::mysql (if you're using MySQL)

*   DBD::Oracle (if you're using Oracle)

*   DBD::Pg (if you're using PostgreSQL)

*   DBD::SQLite (if you're using SQL::Lite)

*   DBD::Sybase (if you're using Sybase)

*   File::Path

*   GD

*   GD::SVG

*   IO::Tee

*   Regexp::Common

*   Template

*   Text::RecordParser

*   Text::ParseWords

*   Time::Piece 

*   Time::ParseDate

*   URI::Escape

*   XML::Simple

Many of the above modules will have dependecies of their own which you
must resolve.  This can be very tedious to do by hand, so if you do
need to install any of these Perl modules, I'd really recommend you
use the CPAN shell, a convenient package that automates the
downloading and building of modules.  The CPAN shell can also can
recursively install all module dependencies automatically, which is a
very nice feature.  To use the CPAN shell, type the following (as
root):

    # perl -MCPAN -e shell

If you're curious, the "-M" flag tells Perl to use a particular
module, in this case "CPAN.pm," and the "-e" flag tells Perl to execute
some code.  In this case, we're executing the command "shell," which
is exported by CPAN.pm.  If you want to see if any of the above
modules is already installed on your system, simply substitute the
name of the module where "CPAN" occurs above, e.g., for the
Class::Base module, you would do the following:

    $ perl -MClass::Base -e 'print "OK\n"'

If Perl is able to load Class::Base, you'll see "OK"; otherwise, you will
certainly know about it, and you could do this (as root):

    # perl -MCPAN -e 'install Class::Base'

The first time you use the CPAN shell, you will have to answer a few
questions mostly concerned with choosing a mirror close to you and
where certain important system binaries are (like "gzip," "ncftp,"
"tar," etc.).  Generally you can just keep hitting <Return> to
accept the defaults presented in square brackets.

Occasionally a module may not install properly via the CPAN shell,
or perhaps it is not available on CPAN or the installation process
wants to upgrade your version of Perl to the latest (and you don't want
that).  In that case, you can install the module in much the same way
that you install system binaries.  I'd recommend downloading the source
into "/usr/local/downloads" and then untarring into "/usr/local/src."
Execute "perl Makefile.PL; make; make test; make install" and you're
generally all done.  If the module requires another module, you'll need
to track that down (try "http://search.cpan.org"), install it, then
return to installing the first one.  After satisfying several
dependencies on your own, you'll begin to appreciate all the automation
the CPAN shell gives you.

3.      INSTALLING CMAP

To install the CMap modules and scripts:

    $ perl Build.PL
    $ ./Build
    $ su -
    # ./Build install

Several configuration options can be set via arguments to Build.PL.
Execute "perl Build.PL -h" to read a brief help message on what they
are and how you can specify your choices.  Reasonable defaults are
provided for all the options if you have no strong feelings about
where to install things.

During the build process, several important steps will be taken:

*   The "Bio::GMOD::CMap::Constants.pm" file will be created in the
    "lib" directory and will have it's "CONFIG_FILE" set to match the
    "CONF" argument to "Build.PL." Should you ever move or rename the
    CMap config file, you will have to alter this file.

*   The "cmap.conf" file will be created in the "conf" directory and
    will set the "template_dir" and "cache_dir" to match the
    "TEMPLATES" and "CACHE" arguments to "Build.PL," respectively.  It
    will then be copied to the "CONF" location.

*   The "cmap_admin.pl" script will be copied into a system binary
    location.  You will use this script for most CMap
    administration tasks.

*   The contents of the "templates" directory will be copied to the
    "TEMPLATES" directory specified to Build.PL.

*   The contents of the "htdocs" directory will be copied to the
    "HTDOCS" directory specified to Build.PL.

*   The "CACHE" diretory specified will be created and have its
    permissions set so that files can be written and deleted from it.

*   The "cmap" CGI script will be created in the "cgi-bin" directory
    and will be copied to the "CGIBIN" directory specified to Build.PL
    and its permissions will be changed to make it executable.

It is probably easiest to simply give the argument
"PREFIX=/usr/local/apache" and place all the CMap files in the
default locations.  

Be sure to update your "cmap.conf" file after installation with the
correct database connection information.  (If you forget the location
of the configuration file and you installed via option #1, then you
can look in the "cmap_install.conf" file in the source directory of
the CMap application.)  The database section is at the top of the
file.  I would encourage you to look around this file and change
things to affect the look and feel of your site.  If you don't like a
change, comment out the line by placing a pound sign ("#") at the
beginning of the line.

If you are upgrading from an earlier version of CMap, I would caution
your to be careful of how you install the latest "cmap.conf."  You'll
probably want to copy your original to a backup location, then copy
this file over manually and "diff" the two.  Most likely, you won't
need to make too many changes to the new one to get things working the
way you had them before.

A small set of sample data is included in the "data" directory.
Simply gunzip the file and then run it into your database (the file 
simply contains SQL statements to empty each table and fill it with
values -- so don't run this file into an existing database unless you
don't mind losing all your data).  E.g., with MySQL you could do this:

    $ cd data
    $ gunzip sample-dump.sql.gz
    $ mysql CMAP < sample-dump.sql

4.      PROTECTING WEB ADMIN WITH A PASSWORD 

You should protect the web admin tool (e.g., "/cgi-bin/cmap/admin")
with a password.  To do this with Apache, use the "htpasswd" program
that is installed in Apache's "bin" directory.  If you've never used
htpasswd before, you can get the quick synopsis by giving it a single
argument of "-h" or "--help."  You should read the help to make sure
that you create your password file correctly (making sure not to
overwrite an existing file!), but this will probably work just fine
for you:

    $ su -
    # cd /usr/local/apache
    # mkdir passwd
    # ./bin/htpasswd -c /usr/local/apache/passwd/cmap admin

In the last command, the last argument is the user name which you'll
use when prompted by your web browser to see the admin tool, and the
argument before that is the name of the new password file that will be
created by the "-c" argument.  If the file already exists, then don't
use "-c."

5.      VIEWING CMAP

Once you have installed the CMap modules, templates, HTML files, and
scripts (command-line and CGI), you should be able to view the CMap
application by pointing your browser to the web server, e.g.:

    http://my.server.org/cmap

If your web server doesn't have a name that resolves into an IP address
for you, then you can just use the IP address instead of a name. You
should see a page created during installation summarizing how CMap was
installed and with links pointing to the CMap CGI script and tutorials.

6.      CRONTAB TO REMOVE OLD IMAGES

The map images will only be used for one request, so you'll need to
include some way to clear out old images.  A simple cron job will do
the trick, so we'll need to add a line root's crontab.  You edit a
crontab by typing "crontab -e" on the command line.  If you are "joe"
when you type this, you'll be editing your own crontab.  Since your
normal login won't likely have the permissions necessary to remove the
old images, you should su to root and execute "crontab -e".  

The "-e" says that you want to "edit" your crontab using an editor.
On most GNU/Linux systems, crontab will use the value of whatever
you've set as in your environment as your EDITOR or VISUAL.  If
nothing is set, then crontab will use "vi," (the VIsual editor,
progeny of "ex").  vi is an interesting editor;  it requires you
understand "command" and "insert" modes, and is usually only used by
somewhat hard-core UNIX-y people.  Unless you're already familiar with
vi, I'd suggest you set your EDITOR to something like "pico," a very
intuitive editor and then run crontab.  How you set your environment
will depend on the shell you're using.  I like bash (GNU's Bourne
Again SHell), so I edit my "~/.bashrc" file, add "export
EDITOR=/usr/bin/pico," then source the file with "source ~/.bashrc."
I can see that it worked by typing "echo $EDITOR" on the command line.

However you choose to edit the file, you'll need to paste or type the
following lines:

  # clear out old CMap images
  # added by Joe User <juser@foo.com>
  0 0 * * *  find /usr/local/apache/cmap/tmp/ -type f -mtime +1 -exec rm -rf {} \;

Of course, you'll want to change the "Joe User..." part to reflect
your own name and e-mail address.  Also, if you choose to store your
map images in a location other than the default directory then you'll
need to change the above directory to match your choice.  When you
save the file, crontab will automatically exit.  If all went well, you
should see a message saying that a new crontab was installed.

If you're curious, a "crontab" is simply a file which uses a particular
syntax to describe to the "cron" daemon events which should happen at some
interval.  (And a "daemon" is a program that runs continuously in the
background on a system that does function, like listening for HTTP
requests [httpd] or FTP requests [ftpd] or telnet requests [telnetd], etc.
You see the pattern:  usually the service and a "d" [for "daemon"] makes
up the name.)  "Crond" (pronounced "cron-dee," always just say "-dee"
for the "d") sits around waiting to do something on someones behalf.  As
you might imagine, the "cron" part implies the time aspect of the program.
So, if you wanted to download a file every month from an FTP site to see
if it had changed, you might see up a crontab to tell crond to do just
that.  You edit your crontab by saying "crontab -e" (for "edit"), then
enter a line that describes to crond when to run the command and what the
command is.  Yours might look like this:

    # download the foo.dat file
    0 0 1 * * <ftp command>

From the man(5) page for crontab (which you get by typing "man 5 crontab"
on my GNU/Linux system), you get this:

       cron(8) examines cron entries once every minute.

       The time and date fields are:

              field          allowed values
              -----          --------------
              minute         0-59
              hour           0-23
              day of month   1-31
              month          1-12 (or names, see below)
              day of week    0-7 (0 or 7 is Sun, or use names)

Every minute "crond" looks around to see if it's time to do something
by looking at the first 5 fields of each line in everybody's crontabs.
Stars mean "all" and numbers mean, well, the number.  So the above
would tell crond to run <ftp command> (whatever that might be) on the
zero-th minute of the zero-th hour (i.e., midnight) of the first day of
every month, regardless of the day of week.  It's a quirky syntax, but
pretty powerful.  I added a comment to the crontab above with the hash
at the beginning of the first line -- that's just being polite.  It's
always a good idea to comment on what you're doing in a system-wide
file like root's crontab so you and everyone else knows what each
command does.  Be sure to put in your own name and e-mail address.  The
whole command (starting with the "0") should go on one line.  

Note: Some UNIXs may have a slightly different cron format. Check
      your man page!

7.      TEMPLATES

All of the dynamic HTML in CMap is generated from templates and
reference stylesheets in the hope that you will find it easy to
customize the look of the application to your web site.  The templates
are processed by the CPAN module Template Toolkit
(http://www.template-toolkit.com/) which employs a very simple yet
powerful syntax for creating displays.  In addition, you can specify
site-specific introductions to most of the pages in your "cmap.conf"
file.

8.      COMMENTS

If you have questions or comments about this document, please write
the CMap development mailing list at
"gmod-cmap@lists.sourceforge.net."  Please consider joining the list
in order to stay up on the latest in the development as well as to
contribute your opinions as to the direction that CMap takes in the
future.

9.      LET US KNOW!

Please consider allowing the GMOD project advertise your use of our
code.  If you have a publicly accessible installation of CMap, we
would very much like to provide a link from the GMOD website to it!

10.     APPENDICES

Depending on your comfort level with software installation on UNIX
environments, you may find some of this document a bit tedious.
I'll try to assume that you know only the basics, but you do need to
know the difference between an unprivileged user and the special
"root" user.  To begin, I'd like to suggest you have many of the
GNU project's utilities installed, such as gcc, gmake, gunzip, and
tar.  If you are installing on a GNU/Linux system, you most likely
already have these, so don't worry about it.  If you're installing
on a Sun Solaris system, you'll probably have gcc and GNU's make,
but you'll likely have to install gunzip and GNU tar.  If, in
addition, you hope to install MySQL, you'll be required to install
GNU tar as Sun's tar is broken and won't untar the MySQL packages
properly.

APPENDIX 1. OPERATING SYSTEM

Since all of CMap is written in Perl, theoretically you should be able
to install the application on any operating system (OS) that Perl
runs on, including different versions of UNIX (Solaris, Linux, *BSD,
Mac OS X) and Windows.  The easiest OSs to build CMap tend to be
Linux and Solaris.  The author has little or no experience building on
other platforms, though he would not discourage you from trying.  CMap
itself is quite easy to install and run -- it's really all the
dependent software (a database, system libraries like "gd," and some
of the trickier Perl modules) that can cause problems.

My general advice is to use precompiled binaries (e.g. RPMs) unless
you want to build from source (with the exception of MySQL, which you
should always use a precompiled binary as it's very difficult to
compile a something more optimized for your OS than what they offer).
Solaris is a decent OS, but the first thing you'll want to do is to
install all the GNU tools (gcc, tar [Sun's tar is broken and won't
unpack MySQL], etc.) that make using Linux so easy.  It can be tricky
getting the necessary libraries installed on OS X, but there are sites
that offer everything you need.

APPENDIX 2. CONVENTIONS FOR BUILDING SOFTWARE ON UNIX

The standard way to install software on a UNIX-like system includes
running something that figures out what your system looks like.
This is usually a script called "configure."  Then you use "make" to
build the binaries, sometimes to test them, and then to install
them.  The first couple of steps can be done as an unprivileged user
(i.e., whatever your normal login on a system is) as long as you
unpack your sources into a directory where you can write files.  The
last step, usually "make install," almost always requires root
privileges as it places the newly built files into sensitive
system directories.

2.1.        WHERE TO PUT SOURCES

As a convention, Linux users often unpack sources into one directory
like "/usr/local/src." Additionally, I would recommend you place all the
original packages (rpm's, deb's, tar.gz's, etc.) into one directory. I
like to create a directory called "/usr/local/downloads" for these types
of files. I'd recommend that both be owned and only writable by root.
After you've stored the files you download, unpack them like into some
source directory. I like to use "/usr/local/src." Here is how to
decompress and unpack a tar.gz file in one step using GNU tar:

    # cd /usr/local/src
    # tar zxvf ../downloads/my-package.tar.gz

Note: The root's prompt is usually shown with a hash sign "#". When
      showing a prompt for a regular user, the convention is to use a
      dollar sign "$". You won't actually type the hash or dollar sign
      in the commands listed, only what follows.

The above command only works with GNU tar.  To unzip and unpack on
Solaris, do the following (assuming you've got "gunzip" installed on 
your system):

    # cd /usr/local/src
    # gunzip -c ../downloads/my-package.tar.gz | tar xvf -

Alternately, you can always just "gunzip" the "tar.gz" file into just
a plain tar file, then untar that.  It takes two steps instead of one,
but it works just as well.

After that, cd into the directory created by the package and follow the
directions for installing the software.  Typically, it will involve the 
basic triumvirate of commands:

    # ./configure
    # make
    # make install

APPENDIX 3. STARTING APACHE ET AL. ON BOOT

Should your system ever go down for any reason (e.g., crash or
reboot), you'll probably want all your services to come back up when
the machine boots.  UNIX-type systems can vary quite a bit in how
you determine what comes up at boot and in what order, but on
typical GNU/Linux systems, you can simply place start scripts in a
directory like "/etc/rc.d/init.d" and then create symbolic links
into the "rcX.d" directory where the "X" represents your default
runlevel (usually 2 or 3 for a server).  Here's how you could start
Apache at boot on a RedHat system with a default runlevel of "3":

    $ su -
    # cd /etc/rc.d/init.d
    # ln -s /usr/local/apache/bin/apachectl ./httpd
    # cd /etc/rc.d/rc3.d/
    # ln -s ../init.d/httpd ./S99httpd
    # ln -s ../init.d/httpd ./K99httpd

The "SXX" and "KXX" prefix are conventions used to indicate "start"
and "kill" scripts.  The number that occurs after the "S" or "K"
indicates the relative order in which the script.  All "S" scripts are
passed a command of "start" when the system is booting and are
processed in alphabetical order, so "S10abc" is started before
"S10def" which is processed before "S11ghi," etc.  The "K" scripts are
given an argument of "stop."  Generally, if you start a service in
this manner, you should cleanly shut it down with a kill script
rather than just letting the process die with the final kill signals
the operating system sends out just before shutdown.

MySQL has its own scripts to make sure it starts up on boot.  You
should follow the directions appropriate for your system.

APPENDIX 4. CVS ACCESS

If you'd like to install and/or hack on the very latest version of
CMap, then you'll want to checkout the "cmap" project from the
anonymous CVS repository at SourceForge.  See the project homepage for
instructions:

    http://gmod.sourceforge.net/cmap

AUTHOR:     Ken Y. Clark <kclark@cshl.org>

__END__
