                              CMAP INSTALL

QUICK START

If you're pretty experienced with Unix systems administration, here is
the very abbreviated explanation of how to install this application:

* Install libgd with at least libpng and libjpeg
* Install MySQL or Oracle, create tables with contents of "sql"
    directory, grant appropriate user permissions
* Install Perl, Apache and mod_perl
* Execute "perl Makefile.PL" and answer the questions
* Execute "make && make install" being sure to install module dependencies
* Add contents of "httpd.conf" and "perlstartup.pl" in "conf"
    directory to your own versions of these files
* Restart Apache
* Import your data (or the test data)
* Compare maps

If you need help, read on.

GETTING STARTED

Depending on your comfort level with software installation on UNIX
environments, you may find some of this document a bit tedious.
I'll try to assume that you know only the basics, but you do need to
know the difference between an unprivileged user and the special
"root" user.  To begin, I'd like to suggest you have many of the
GNU project's utilities installed, such as gcc, gmake, gunzip, and
tar.  If you are installing on a GNU/Linux system, you most likely
already have these, so don't worry about it.  If you're installing
on a Sun Solaris system, you'll probably have gcc and GNU's make,
but you'll likely have to install gunzip and GNU tar.  If, in
addition, you hope to install MySQL, you'll be required to install
GNU tar as Sun's tar is broken and won't untar the MySQL packages
properly.

CONVENTIONS FOR BUILDING SOFTWARE ON UNIX

The standard way to install software on a UNIX-like system includes
running something that figures out what your system looks like.
This is usually a script called "configure."  Then you use "make" to
build the binaries, sometimes to test them, and then to install
them.  The first couple of steps can be done as an unprivileged user
(i.e., whatever your normal login on a system is) as long as you
unpack your sources into a directory where you can write files.  The
last step, usually "make install," almost always requires root
privileges as it places the newly built files into sensitive
system directories.

WHERE TO PUT SOURCES

As a convention, Linux users often unpack sources into one
directory like "/usr/local/src."  Additionally, the author likes to
place all the original packages (rpm's, deb's, tar.gz's, etc.) into
the directory "/usr/local/downloads."  This directory doesn't
usually exist, so I do the following (as root):

    # mkdir /usr/local/downloads
    # chgrp users /usr/local/downloads
    # chmod g+w /usr/local/downloads

Where the group "users" is a group I'm a member of.  This way I can
write all my downloads into the directory without having to su to
root.  (Note the convention of showing root's prompt with a hash sign
"#".  When showing a prompt for a regular user, the convention is to
use a dollar sign "$")  Some people also like to make the directory
"/usr/local/src" writable by "users" (or whatever you call it on
your system), but I'm a bit too paranoid to do that.  This means I
usually do all my configuring and building as root, for better or
worse.
 
As you download the packages required, put them into
"/usr/local/downloads" (or wherever you can keep up with them), and
unpack them like into "/usr/local/src" like so:

    # cd /usr/local/src
    # tar zxvf ../downloads/my-package.tar.gz

The above command only works with GNU tar.  To unzip and unpack on
Solaris, so the following (assuming you've got "gunzip" installed on 
your system);

    # cd /usr/local/src
    # gunzip -c ../downloads/my-package.tar.gz | tar xvf -

After that, cd into the directory created by the package and follow the
directions for installing the software.  Typically, it will involve the 
basic triumverate of commands:

    # ./configure
    # make
    # make install

REQUIREMENTS

There are quite a number of prerequisites to getting this running:

    * libgd 
    * a database (MySQL 3.23.x or Oracle 9x) 
    * Perl (5.00503 or higher, 5.6.1 suggested)
    * Apache (version 1.3.26 suggested)
    * mod_perl (version 1.27 suggested)

LIBGD

Unfortunately, you're pretty much on your own for installing libgd.
With any luck, you may already have it on your system if you have a
GNU/Linux system.  To check, you could just skip this step for now
and wait to see if the Perl module GD.pm will install properly.  If
it complains that it can't find libgd, then come back here.

Installation of libgd can easily be one of the more frustrating
parts of this installation.  There are a number of dependencies 
including the zlib compression library and whatever image libraries
you want, like JPEG, libpng, and libgif.  Again, you may already
have some of these libraries, so you needn't panic just yet.  One
way to see if you do is to check the directories "/usr/lib" and
"/usr/local/lib" for files that look like "libgd*," "libjpeg*,"
"libpng*," and "libgif*".

To install libgd, retrieve the source (tar.gz package) from Paul
Boutell's (author of libgd) website.  Do note that you should be sure
to use the only a 1.x version of libgd with a 1.x version of GD.pm, or
go with 2.x versions of both or you'll get nasty segfaults.  When you
go to build libgd, it should tell you which libraries it can and can't
find.  You definitely won't get far without zlib installed, so you
need to do that first.  Then you can look to see which kinds of files
libgd will be able to write after you run the configure process.
You'll want to be sure that you can at least write JPEG (Joint
Photographic Experts Group) and PNG (Portable Network Graphics)
formats.  You can create GIF if you don't mind worrying about
ridiculous software patents over the LWZ compression algorithm.  PNG
was created to be a completely open and free alternative to GIF.
 
Here are URLs to help you track down everything you need to install libgd:

    * libgd: http://www.boutell.com/gd/
    * libpng: http://www.libpng.org/pub/png/pngcode.html
    * zlib: http://www.gzip.org/zlib/
    * JGEP: http://www.ijg.org/

DATABASE

The CMAP application relies on a relational database management system
(RDBMS) to store and retrieve data.  If you already have a database
such as MySQL, Oracle (version 9 or higher) installed on your system,
you can skip ahead to the next section.  If not and you're doing this
on your own, and aren't a trained DBA, I'd recommend using MySQL for
your database.  It's free, extremely stable, flexible, and fun.
Oracle is really overkill for such a lightweight application as this
because the code doesn't rely on much of anything from the database
except joins (no transactions, no referential integrity, no stored
procedures, etc.).  If you prefer to use Oracle, you're in luck
because this application was developed concurrently on MySQL 3.x and
Oracle 9x.  Note, Oracle 8x doesn't support ANSI-standard left joins,
so some parts of the application will fail.  If you can't upgrade,
then you can alter the few SQL statements that cause problems.  If you
prefer to use some other RDBMS, like PostgreSQL or Sybase or whatever,
then you're still in luck.  Much has been done to make the SQL simple
and portable and extendible.  If an SQL statement is giving you
problems, you can likely create a small module and override the
statement with one of your own making.  More on that later.

I'll assume that you're going to use MySQL.  If you don't already
have MySQL on your system, you can get everything you need either
from your software vendor or directly from http://www.mysql.com/.
There is a package called "Apache Toolbox" that claims to be able to
install MySQL and Apache and many other things.  It's available at
http://www.apachetoolbox.com/.  Additionally, RedHat Linux offers
RPMs for installing everything you need, Debian GNU/Linux offers
their DEB packages, or you can get precompiled binaries from MySQL
for the architecture of your machine.  You may also choose to
install from source, depending on your bent.  There are a number of
freely available GUI (Graphical User Interface) and web-based tools
to help you manage your databases if you want an alternative to
MySQL's command-line tools.  See the MySQL website for more
information.  If you get really stuck, then MySQL AB, the company
which develops and releases MySQL, offers commercial support.

CREATING DATABASE TABLES AND GRANTING PERMISSIONS

Once you've settled on your database of choice and have a working
installation, you need to create the tables that will hold the data for
the comparative maps.  In the "sql" directory, you will find create
scripts for Oracle and MySQL.  If you need to create scripts for a
different database, then write the author for a copy of an upcoming
(RSN) CPAN module, SQL::Translator, specifying which database you're
using.  All efforts will be made to help you convert the schema to
your system.

For MySQL, you can do the following to create the database "CMAP" and
grant appropriate permissions to a user "joe" with the password
"foobar":

    $ mysql -uroot -p -e 'create database CMAP'
    $ mysql -uroot -p CMAP < sql/cmap.create.mysql
    $ mysql -uroot -p CMAP -e 'grant select, insert, update, delete 
        on CMAP.* to joe@localhost identified by "foobar"'

In the above example, you'll be required to type the root password
for MySQL.  Note:  this is not the same "root" as your system
"root."  If you never set MySQL's "root" password, then just hit
<Enter> at the password prompt (though I'd be remiss if I didn't
suggest you actually protect your MySQL root user with a decent
password).  Be sure to remember the username and password you'll
connect to the database with as you'll need it further into the
configuration process.

If you're using something other than MySQL, then you should do the
equivalent of creating the tables described in the create scripts in
the "sql" directory and then granting the proper permissions to
whatever user will connect to your database.

INSTALLING PERL 

It would be hard to imagine that a UNIX system wouldn't have some
version of Perl installed.  We need a minimun of Perl 5.00503.  To
see if you have that, type:

    $ perl -v

On my current system, the output looks like this:

    This is perl, v5.6.1 built for i686-linux

    Copyright 1987-2001, Larry Wall

    Perl may be copied only under the terms of either the Artistic 
    License or the GNU General Public License, which may be found 
    in the Perl 5 source kit.

    Complete documentation for Perl, including FAQ lists, should be
    found on this system using `man perl' or `perldoc perl'. If you have
    access to the Internet, point your browser at http://www.perl.com/,
    the Perl Home Page.

If your version of Perl is OK, you can likely skip ahead to the next
section.  If you have anything 5.4 or older, you'll need to upgrade
your Perl binary.  Even if your Perl is new enough, you may still want
to consider building a new binary from source if you've never done so.
It's actually fun (in a geeky way), but it also may prove a necessity.
A fair number of mod_perl installations fail because people use broken
RPM versions of Perl.  You can just stick with your installed Perl and
just see if it causes problems.  Obviously, upgrading important system
binaries like Perl can cause unforeseen problems.  If you're using an
established machine that is already being used for other tasks,
upgrading Perl could break a lot of things, so you should discuss this
with your sysadmin.  If you are lucky enough to have a free machine to
play with, it's nice to start with a clean slate by building
everything from source.  You should choose what's practical,
convenient, and appropriate for you.

If you want to install a new Perl binary, it only takes a few
minutes to download and build.  Here's one way:

    $ su -
    # cd /usr/local/downloads
    # ncftp ftp.cpan.org
    ncftp> cd /pub/CPAN/src
    ncftp> get perl-5.6.1.tar.gz
    ncftp> quit
    # cd ../src
    # tar zxvf ../downloads/perl-5.6.1.tar.gz
    # cd perl-5.6.1
    # sh Configure -de
    # make
    # make install

For better downloads, go to the CPAN (Comprehensive Perl Archive
Network) website and find a mirror near you.  (A mirror is a machine
who's owner is nice enough to provide disc space and bandwidth so
that damand can be distributed amongst processors and across
geographical areas.  Needless to say, it's usally better to find a
mirror that's near you as long as that machine isn't overloaded.
Just keep trying different machines until you find one with a good,
fast connection to you.)

INSTALLING APACHE ANG MOD_PERL

Given that Apache is the most popular web server right now, it's
also likely that you'll already have it installed on your system.
Additionally, mod_perl is becoming a very standard package, and a
number of systems offer prebuilt binaries or easy-to-install
packages.  Both RedHat and Debian have such packages, and Windows
users can also install pre-built binaries.  To see if your Apache
binary has mod_perl compiled into it, do the following:

    $ cd /usr/local/apache/bin
    $ ./httpd -l

Here's the output of mine:

    Compiled-in modules:
      http_core.c
      mod_env.c
      mod_log_config.c
      mod_mime.c
      mod_negotiation.c
      mod_status.c
      mod_include.c
      mod_autoindex.c
      mod_dir.c
      mod_cgi.c
      mod_asis.c
      mod_imap.c
      mod_actions.c
      mod_userdir.c
      mod_alias.c
      mod_rewrite.c
      mod_access.c
      mod_auth.c
      mod_proxy.c
      mod_setenvif.c
      mod_perl.c
    suexec: disabled; invalid wrapper /usr/local/apache/bin/suexec

If you see "mod_perl.c" in the list, then you can probably skip
ahead to the next section.  If, however, you choose to build Apache
and mod_perl for your system, either because it's not already
installed or because you need to upgrade or becaue you're a purist
or just because it's fun, you'll be happy to know that it's quite
easy.  Both are available from the Apache mirrors.  I'll be
referencing "ftp.apache.org," but you should find a mirror near you
by looking on the Apache website, http://www.apache.org/.  Apache
can be found in "/pub/dist/httpd/apache_1.3.26.tar.gz" and mod_perl
can be found in "/pub/dist/perl/mod_perl-1.27.tar.gz."  Note:  This
application has only been developed under the Apache and mod_perl
1.x trees.  Apache and mod_perl 2.x are exciting new frontiers for
mod_perlers, but it will be a while before this application is moved
to that architecture.  Just stick with the 1.x trees.

You can install Apache and mod_perl in one fell swoop so long as
you're not interested in compiling in any other modules (e.g., PHP
or SSL, etc.).  To do so, grab the sources for both and unpack them
into a directory so that they're side by side, then follow the
directions included in the INSTALL.apaci file in the mod_perl
distribution.  Here's an example:

    $ su -
    # cd /usr/local/src
    # tar zxvf ../downloads/apache_1.3.26.tar.gz
    # tar zxvf ../downloads/mod_perl-1.27.tar.gz
    # cd mod_perl-1.27
    # perl Makefile.PL \
    > APACHE_PREFIX=/usr/local/apache \
    > APACHE_SRC=../apache_1.3.26/src \
    > DO_HTTPD=1 \
    > EVERYTHING=1 \
    > USE_APACI=1
    # make
    # make test
    # make install

The backslashes ("\") above tell the command-line that you are
continuing the command on a new line.  It's not necessary to do
this.  You can just keep typing, but it's easier to see what you're
doing when you use multiple lines.

The APACHE_PREFIX that I list above is not necessarily where you
should install Apache.  It's a fairly standard location on most
GNU/Linux systems, but where Apache goes is still up to the
descretion of your sysadmin (which is probably you, if you're
reading this).  There's no reason whatsoever that Apache can't be
installed "/var/web/" or "/opt/httpd" (though I might not recommend
installing into "/tmp/" :-).  For the purposes of this document,
"/usr/local/apache" can be substituted with whatever path you
choose.

(As an aside, you'll notice that the first command you give to build
most Perl packages is "perl Makefile.PL."  This is the equivalent of
the "configure" script in standard UNIX packages.  This command
tells your Perl binary to figure out what needs to happen in the
"make" process.  Additionally, you'll see that you should "make
test" when installing.  When testing a package, *all* tests should
pass (unless you know that certain failures are OK for your system).
Generally failures in the installation of a Perl module can be
remedied by installing some dependency (usually another Perl module
or a system library).  If tests still fail, it is very important
that you report these errors to the module authors so that they can
be fixed.)

INSTALLING PERL MODULES

If you ever need to install a Perl module, I'd really recommend you
use the CPAN shell.  It is a really convenient package that
automates the downloading and building of modules.  Additionally, it
can recursively install all module dependencies automagically.  To
use the CPAN shell, type the following (as root):

    # perl -MCPAN -e shell

(If you're curious, the "-M" flag tells Perl to use a particular
module, in this case "CPAN.pm," and the "-e" flag tells Perl to execute
some code.  In this case, we're executing the command "shell," which
is exported by CPAN.pm.  If you ever wanted to see if a particular
module was loaded on your system, e.g., the DBI module, you could do
the following:

    $ perl -MDBI -e 'print "OK\n"'

If Perl is not able to load DBI, you will certainly know about it;
otherwise you'll see "OK.")

The first time you use the CPAN shell, you will have to answer a few
questions mostly concerned with choosing a mirror close to you and
where certain important system binaries are (like "gzip," "ncftp,"
"tar," etc.).  Generally you can just keep hitting <Return> to
accept the defaults presented in square brackets.

Occasionally a module may not install properly via the CPAN shell,
or perhaps it is not available on CPAN (many aren't).  In that case,
you can install the module in much the same way that you install
system binaries.  I'd recommend downloading the source into
"/usr/local/downloads" and then untarring into "/usr/local/src."
Execute "perl Makefile.PL; make; make test; make install" and you're
generally all done.  If the module requires another module, you'll
need to track that down, install it, then return to installing the
first one.  After satisfying several dependencies on your own,
you'll begin to appreciate all the automation the CPAN shell gives
you.

INSTALLING THE CMAP PERL MODULES

To install the cmap modules included in this package, you can either
use the normal installation routine to place the modules into Perl's
system-wide library path, or you can put the modules into a directory
of your own choosing.  Unless you'd like to have reasons to do the
latter, I'd recommend choosing the first way.  Here's how to do both:

1)  Execute the following commands in the directory created by
    untarring the CMAP distribution:

    $ perl Makefile.PL
    $ make
    # make install

    You will be asked several questions, such as where to place the main
    configuration file, the templates, the "cmap_admin.pl" script, and
    an HTML stylesheet. You can place them in any valid directory on
    your system, and you will be provided with reasonable defaults. If
    you don't wish to have the installer put file in a directory (e.g.,
    you want to use your own stylesheet), answer "no" to the default
    choice and "q" when prompted for a path. All the questions are
    optional, so you could do this for all of them. If a file of the
    same name exists in the installation directory for anything but the
    templates, you will be prompted whether to overwrite this file.

    As you make your choices, two key files will receive crucial updates:

    Bio::GMOD::CMap::Constants
        This file will have the value of the "CONFIG_FILE" altered
        to match CONF_DIR.

    conf/cmap.conf
        This file will have the value of "template_dir" altered 
        to match TEMPLATE_DIR.

2)  Manually place the contents of "conf," "lib," "bin," and
    "templates" into directories of your choosing like so:
    
    conf/cmap.conf
        Copy to a location readable by all scripts and processes
        that will need to read this file (command-line scripts run
        by users and the httpd process) as this file contains 
        database connection info and other runtime options.  Be sure 
        to change TEMPLATE_DIR yourself to reflect the location of
        the CMAP templates.

    conf/cmap.css
        This is the cascading stylesheet used by the maps. Copy to a
        location where a web browser can retreive, such as a
        "stylesheets" directory.

    lib
        Copy to a location visible to all Perl/mod_perl processes. Be
        sure to update your PERL5LIB environment variable and the
        "perlstartup.pl" script to reflect your custom installation. I
        like to put custom libraries used by Apache under
        "/usr/local/apache/lib/perl" (assuming, of course, that you
        might have libraries for Java and Python and whatever else
        tickles your fancy).  
    
        Note: Be sure to update Bio::GMOD::CMap::Constants to have
              "CONFIG_FILE" point to the correct location of your
              configuration file ("cmap.conf") or things won't work!

    bin
        Copy "cmap_admin.pl" to a location suitable for the execution by
        the curator(s) of your data, such as "/usr/local/bin/". If you
        are the only one who will run the script, perhaps place it into
        $HOME/bin.

    templates
        Copy to a location readable by your mod_perl server. I would
        recommend putting the templates into
        "/usr/local/apache/templates/cmap."

    And why might you want to put the files into your own library path
    instead of Perl's? Well, if you plan on hacking around with the
    source, you might rather not have them installed in an inconvient
    directory and owned by root, which they will be if you choose the
    first. Of course, if you really plan on hacking around, I would hope
    that you would consider doing a CVS checkout so you could contribute
    your work back to the project! More on that later.

Either way you install, you'll need to be sure to edit your
"cmap.conf" file to use the correct database connection information.
(If you forget the location of the configuration file and you
installed via option #1, then you can look in the "cmap_install.conf"
file in the source directory of the CMAP application.) The database
section is at the top of the file.  Only the first two options
("database" and "template_dir") *must* be set.  Everything else has
reasonable defaults if nothing is specified in this file.  I would
encourage you to look around this file and change things to affect the
look and feel of your site.  If you don't like a change, comment out
the line by placing a pound sign ("#") at the beginning of the line.
Remember to restart Apache to see the changes.

CONFIGURING APACHE

After installing Apache, mod_perl, and all the necessary modules,
you're now ready to configure Apache.  Two files are included in the
"conf" directory of this package to help you do this:
"httpd.conf" and "perlstartup.pl."  The first of these files
contains all the additions you should make to your own httpd.conf in
order to configure the Apache environment and to set up the various
handlers for the CMAP application.  The second file, typically
called something like "perlstartup.pl" (but you can call it whatever
you like) is used to let Apache know about the modules it will use
in its lifetime, and is placed in the same directory as the
httpd.conf.  The parent Apache process will parse this file and
include all the modules in each child process, further enhancing the
performance of the application.

NOTE:  All the files in Apache's "conf" directory are very important
and sensitive, so it's best to have everything be owned and writable
only by root.  The startup file will be executed as root, so this
could represent an easy root compromise were a non-root user able to
write to the file.

I'll now briefly discuss the meaning of the edits you'll make to
httpd.conf so you can intelligently edit you own entries.

* PerlRequire /path/to/perlstartup.pl

This is the location of the file that lists all your Perl modules.
Generally the path would be "/usr/local/apache/conf/perlstartup.pl."

* Alias /cmap/images /tmp/cmap_cache

This is the directory where the application will write the temporary
images created for each request.  Apache will directly serve the
images from this cache.  If you do not define a directory, then the
default ("/tmp/cmap_cache") will be created for you on the first
request.  You can, however, specify your own choice if you have a
preference, perhaps something in your "/var" directory or something
on a partition separate from your web server.  If you create a
directory on your own, be sure that this directory is writable by
the httpd process (usually "web" or "nobody"), and that the
permissions on it are very restrictive.  I would suggest the
following (as root, of course):

    # mkdir /path/to/images
    # chown nobody:nobody /path/to/images 
    # chmod 700 /path/to/images 

Whether you create the cache directory or not, you will need to alias
it so that Apache will know where to find the images.  So, let's say
that you decide to put your images into "/var/web/cmap_cache" and that
you'd like to reference those images through a web browser as
"/cmap/images," you'll need to edit the above line in your
httpd.conf to reflect the default value or your own choice.

I'd probably recommend against placing the images directly into your
DocumentRoot as the space taken by the images is completely dependent
upon the amount of traffic your site gets.  You could conceivably fill
your primary disk partition if you either never cleaned out old images
or someone launched some sort of DoS attack on you.  It would be
better to place them into a directory on a separate partition, like
"/var," which is usually able to handle such variable directories.
Where ever you put your images and however you alias them, be sure that
the "<img>" tag in the "cmap_viewer.tmpl" template reflects the same
path as your Alias.  (Of course, you won't have to change anything
in the templates if you use the default of "/cmap/images.")

The map images will only be used for one request, so you'll need to
include some way to clear out old images.  A simple cron job will do
the trick.  Add this to your root crontab (e.g., by running "crontab
-e" as root):

    # clear out old cmap images
    # added by Joe User <juser@foo.com>
    0 0 * * *  find /var/web/comparative_map_cache/ \
        -type f -mtime +1 -exec rm -rf {} \;

It's always a good idea to comment on what you're doing in a
system-wide file like a crontab so you and everyone else knows what
each command does.  Be sure to put in your own name and e-mail
address.  The whole command (starting with the "0") should go on one
line, so the first backslash is just my way of indicating to you
that the command continues on the next line.  The second backslash,
however, is actually a part of the command.  It tells "find" that
the semi-colon is part of its "-exec" command.

* <Location> directives

You'll add two directives to your httpd.conf, the second of which is
only necessary if you wish to password-protect your administrative
interface (which I'm sure you will).  An actual directory called
"cmap" can exist in your DocumentRoot, but there's no reason for it.
You may want to place the CMAP stylesheet there, but it's probably
just as easy to create a site-wide "stylesheets" directory.  However,
the code is written in such a way that any files in a "/cmap"
directory will be properly served by Apache.

To protect the administrative interface with a password, you'll need
to use the "htpasswd" program that is distributed with Apache.  It is
usually located in the same directory as the "httpd" binary
(e.g., "/usr/local/apache/bin").  If you've never used htpasswd
before, you can get the quick synopsis by giving it a single argument
of "-h" or "--help."  You should read the help to make sure that you
create your password file correctly (making sure not to overwrite an
existing file!), but this will probably work just fine for you:

    $ su -
    # cd /usr/local/apache/bin
    # mkdir passwd
    # ./htpasswd -c /usr/local/apache/passwd/cmap admin

In the last command, the last argument is the username which you'll
use when prompted by your web browser to see the admin tool, and the
argument before that is the name of the new password file that will be
created by the "-c" argument.  If the file already exists, then don't
use "-c."

STARTING APACHE

Now see if Apache like what you've done by typing the following commands:

    $ su -
    # cd /usr/local/apache/bin
    # ./apachectl configtest

If you see "Syntax OK," then restart Apache:

    # ./apachectl stop
    # ./apachectl start

STARTING APACHE ET AL. ON BOOT

Should your system ever go down for any reason (e.g., crash or
reboot), you'll probably want all your services to come back up when
the machine boots.  UNIX-type systems can vary quite a bit in how
you determine what comes up at boot and in what order, but on
typical GNU/Linux systems, you can simply place start scripts in a
directory like "/etc/rc.d/init.d" and then create symbolic links
into the "rcX.d" directory where the "X" represents your default
runlevel (usually 2 or 3 for a server).  Here's how you could start
Apache at boot on a RedHat system with a default runlevel of "3":

    $ su -
    # cd /etc/rc.d/init.d
    # ln -s /usr/local/apache/bin/apachectl ./httpd
    # cd /etc/rc.d/rc3.d/
    # ln -s ../init.d/httpd ./S99httpd
    # ln -s ../init.d/httpd ./K99httpd

The "SXX" and "KXX" prefix are conventions used to indicate "start"
and "kill" scripts.  The number that occurs after the "S" or "K"
indicates the relative order in which the script.  All "S" scripts are
passed a command of "start" when the system is booting and are
processed in alphabetical order, so "S10abc" is started before
"S10def" which is processed before "S11ghi," etc.  The "K" scripts are
given an argument of "stop."  Generally, if you start a service in
this manner, you should cleanly shut it down with a kill script
rather than just letting the process die with the final kill signals
the operating system sends out just before shutdown.

MySQL has its own scripts to make sure it starts up on boot.  You
should follow the directions appropriate for your system.

IMPORTING YOUR DATA

Now you've got some basic setup to do for your data.  First off, open
up the web administration interface by going to the URL you set up for
the admin interface ("/cmap/admin" by default).  You'll need to set up
what types of maps, features, species, and evidence types you'll be
working with.  For each, go to the "View ..." choice from the main
menu, then choose "Create New ..." and fill in the correct
information.  For information on the correct format for data import,
execute the command "perldoc Bio::GMOD::CMap::Admin::Import" on your
command line.  When you have your data in the correct format, launch
the "cmap_admin.pl" script and follow the instructions.

When setting up database cross-references, you'll have to use some
extra syntax in the URL field to indicate the field to link out on.
Here's an example from Gramene for linking to GrainGenes:

    http://www.graingenes.org/cgi-bin/WebAce/webace?db=graingenes&class=Locus&object=[% feature.feature_name %]

Here's how the Gramene project links to its own contig viewer:

    /perl/contigview?clone=[% feature.feature_name %]

The funny brackets ("[%" and "%]") are from Template Toolkit, the
templating system used for the comparative maps.  Simply use whichever
field you want from the feature table (accession_id, feature_name, or
alternate_name) and the above style syntax for either absolute (first)
or relative (second) URLs.

MAKING CORRESPONDENCES

There are several ways to create correspondences among features.

1) Strictly name-base: If you choose the "Find name-based
   correspondences" command from cmap_admin.pl, a correspondence will be
   created between any two features with the *exact* same name,
   irrespective of case. You'll need to select some evidence type to
   represent this automated correspondence.

2) Import correspondences: Create a tab-delimited file that lists the
   accession IDs of two features and some evidence to support the
   correspondence. The first line of the file should contain column
   headers for "feature_aid1," "feature_aid2," and "evidence." The
   order is unimportant, as long as the data is ordered the same.
   Here's a sample:

    feature_aid1	feature_aid2	evidence
    6058	6214	Insilico
    6058	6233	Insilico
    6058	561616	Insilico
    561259	6214	Insilico

3) Create correspondences by hand using the admin interface.

After creating any new correspondences (or deleting existing ones),
be sure to run the "Reload correspondence matrix" option of the
"cmap_admin.pl" script to update the matrix.

ESTABLISHING LANDMARKS

You can define certain features on your maps to be "landmarks."  These
can then be used by the end user to show maps less dense with feature
labels, tagging only those that you as the curator have decided are
the most important.  Simply set the "is_landmark" field to "1" to
define a feature as a landmark.

LINKING IN

Most likely, you'll want to link directly into the CMAP viewer from
some other part of your site.  To link to just one map, make it the
"reference" map like so by using the accesion IDs for the map's parent
"set" and the map itself.  Give the feature (mutant) name to highlight
it;  for more than one, separate with commas.  You'll want to make
sure that the user can see all the feature labels, so include "all" as
the "include_feature" arg.

    URI:  /cmap/viewer?
    Args: ref_map_set_aid=<map_set_accession_id>
          ref_map_aid=<map_accession_id>
          highlight=<mutant_name>
          include_features=<none, all, or landmarks>
    E.g.:
http://www.gramene.org/cmap/viewer?ref_map_aid=13&ref_map_set_aid=cu-dh-2001&highlight=RM9&include_features=all

Note: I use the abbreviation "aid" to represent "accession_id."

To further include some number of comparative maps, you provide them
in the "comparative_maps" argument, which is a single structured
string that lists all the comparative maps and their placement
relative to the reference map.  Here I'd like to introduce the concept
of "slots," where the maps (or map sets) fall into a slot moving in
positive and negative direction away from the reference map, which is
in slot "0," like so:

                -      -        -         -
                |      |        |         |
                |      |      - |  -      |
                |      |      | -  |      |
                |      |      |    |      |
                |      |      |    -      |
                -      -      -           -
               -1      0         1        2
       <----negative --+---------positive----->


The above would be representative of genetic maps in slots -1, 0, and
2, and a physical map in slot 1.  Slots are separated in the string by
URI-escaped colons and the integral parts of the slot by URI-escaped
equal signs.  Like so

         "comparative_maps="
         +
             .-  <slot_number> + 
             |  "%3D" + 
       slot  |  <"map_aid" or "map_set_aid"> + 
             |  "%3D" +
             `-  <map_aid or map_set_aid>
         +

         "%3A"

         +

        <next slot>

Here is a sample that puts "Rice-Cornell RFLP 2001-1" on the left
(slot "-1") and "Rice-CTIR 2000-1" on the right (slot "1"):

    comparative_maps=1%3Dmap_aid%3D423%3A-1%3Dmap_aid%3D1

The middle part of the slot is one of the literal strings
"map_set_aid" or "map_aid."  If you wanted to display just a single
map in a slot, use the string "map_aid" and the map's accession ID.
If you want a whole map set in a slot (e.g., a physical map set like
"I-Map"), then use the string "map_set_aid" and the map set's
accession ID.  You can use the admin interface ("/cmap/admin") to
easily find the accession IDs.

CUSTOMIZING YOUR INSTALLATION

You should edit "cmap.conf" with the proper connection data for your
database and to reflect your own preferences for how maps are drawn.
Each entry in the configuration file is commented to help you
understand its purpose and the possible values and default values are
also provided.  If you don't understand a configuration, you can just
leave it alone and use the default.  Remember to restart Apache
whenever you make a change to this file as these are constants and
don't change for the life of the Apache process.

You can change the way maps and features are drawn based on
their types.  Use the web-based admin tool to edit each "map type"
and "feature type" that you create.  Experiment with the colors,
shapes, and sizes.

All the HTML displayed by the application is contained in the
templates.  These templates are processed by Template Toolkit to
produce the user interface.  For the most part, the files contain
straight-up HTML and can be altered to your heart's content.  You
could probably even pass off the care and feeding of these templates
to a non-technical person (as this was the idea behind having no HTML
in the code).  The only functional parts of the templates lie in
between the many "[% %]" tags, and these are often quite
self-explanatory.  If you can't figure out what to change on your own,
then check out http://www.template-toolkit.com/ for the documentation
(or type "perldoc Template" on your command line).

CVS ACCESS

If you'd like to install the very latest (which is not necessarily
guaranteed to work!), then you'll want to checkout the "cmap" project
from the anonymous CVS repository at SourceForge.  See the project
homepage for instructions:

    http://gmod.sourceforge.net/

COMMENTS

If you have questions or comments about this document, please write
the CMAP development mailing list at "gmod-cmap@lists.sourceforge.net."

__END__
