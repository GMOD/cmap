                              CMAP INSTALL

                             $Revision: 1.27 $

1.      QUICK START

If you're pretty experienced with Unix systems administration, here is
the very abbreviated explanation of how to install CMap:

*   Install libpng, libjpeg and libgd
*   Install MySQL, PostgreSQL, Oracle or Sybase, create tables with
    contents of "sql" directory, grant appropriate user permissions
*   Install Perl 5.6.1 or greater, Apache 1.3.27 and mod_perl 1.28
*   Execute "perl Makefile.PL" and answer the questions
*   Execute "make && make install" being sure to install module dependencies
*   Add contents of "httpd.conf" and "perlstartup.pl" in "conf"
    directory to your own versions of these files
*   Restart Apache
*   Import data
*   Compare maps

If you need further instructions, read on.

2.  GETTING STARTED

Depending on your comfort level with software installation on UNIX
environments, you may find some of this document a bit tedious.
I'll try to assume that you know only the basics, but you do need to
know the difference between an unprivileged user and the special
"root" user.  To begin, I'd like to suggest you have many of the
GNU project's utilities installed, such as gcc, gmake, gunzip, and
tar.  If you are installing on a GNU/Linux system, you most likely
already have these, so don't worry about it.  If you're installing
on a Sun Solaris system, you'll probably have gcc and GNU's make,
but you'll likely have to install gunzip and GNU tar.  If, in
addition, you hope to install MySQL, you'll be required to install
GNU tar as Sun's tar is broken and won't untar the MySQL packages
properly.

3.      CONVENTIONS FOR BUILDING SOFTWARE ON UNIX

The standard way to install software on a UNIX-like system includes
running something that figures out what your system looks like.
This is usually a script called "configure."  Then you use "make" to
build the binaries, sometimes to test them, and then to install
them.  The first couple of steps can be done as an unprivileged user
(i.e., whatever your normal login on a system is) as long as you
unpack your sources into a directory where you can write files.  The
last step, usually "make install," almost always requires root
privileges as it places the newly built files into sensitive
system directories.

4.      WHERE TO PUT SOURCES

As a convention, Linux users often unpack sources into one directory
like "/usr/local/src." Additionally, I would recommend you place all the
original packages (rpm's, deb's, tar.gz's, etc.) into one directory. I
like to create a directory called "/usr/local/downloads" for these types
of files. I'd recommend that both be owned and only writable by root.
After you've stored the files you download, unpack them like into some
source directory. I like to use "/usr/local/src." Here is how to
decompress and unpack a tar.gz file in one step using GNU tar:

    # cd /usr/local/src
    # tar zxvf ../downloads/my-package.tar.gz

Note: The root's prompt is usually shown with a hash sign "#". When
      showing a prompt for a regular user, the convention is to use a
      dollar sign "$". You won't actually type the hash or dollar sign
      in the commands listed, only what follows.

The above command only works with GNU tar.  To unzip and unpack on
Solaris, do the following (assuming you've got "gunzip" installed on 
your system):

    # cd /usr/local/src
    # gunzip -c ../downloads/my-package.tar.gz | tar xvf -

Alternately, you can always just "gunzip" the "tar.gz" file into just
a plain tar file, then untar that.  It takes two steps instead of one,
but it works just as well.

After that, cd into the directory created by the package and follow the
directions for installing the software.  Typically, it will involve the 
basic triumvirate of commands:

    # ./configure
    # make
    # make install

5.      REQUIREMENTS

There are quite a number of prerequisites to getting this running:

    * libgd 
    * a database (MySQL 3.23.x/4.1, Oracle 9x, Sybase, PostgreSQL) 
    * Perl (5.6.1 or higher)
    * Apache (version 1.3.27 suggested)
    * mod_perl (version 1.28 suggested)

6.      LIBGD

Unfortunately, you're pretty much on your own for installing libgd.
With any luck, you may already have it on your system if you have a
GNU/Linux system.  To check, you could just skip this step for now
and wait to see if the Perl module GD.pm will install properly.  If
it complains that it can't find libgd, then come back here.

Installation of libgd can easily be one of the more frustrating
parts of this installation.  There are a number of dependencies 
including the zlib compression library and whatever image libraries
you want, like JPEG, libpng, and libgif.  Again, you may already
have some of these libraries, so you needn't panic just yet.  One
way to see if you do is to check the directories "/usr/lib" and
"/usr/local/lib" for files that look like "libgd*," "libjpeg*,"
"libpng*," and "libgif*".  If you're using something like RedHat Linux,
you could try the "locate" command for each of these (without the star
as it does wildcard searching on its own).

To install libgd, retrieve the source (tar.gz package) from Paul
Boutell's (author of libgd) website.  Do note that you should be sure
to use the only a 1.x version of libgd with a 1.x version of GD.pm, or
go with 2.x versions of both or you'll get nasty segfaults.  When you
go to build libgd, it should tell you which libraries it can and can't
find.  You definitely won't get far without zlib installed, so you
need to do that first.  Then you can look to see which kinds of files
libgd will be able to write after you run the configure process.
You'll want to be sure that you can at least write JPEG (Joint
Photographic Experts Group) and PNG (Portable Network Graphics)
formats.  You can create GIF if you don't mind worrying about
ridiculous software patents over the LWZ compression algorithm.  PNG
was created to be a completely open and free alternative to GIF.
 
Here are URLs to help you track down everything you need to install libgd:

    * libgd: http://www.boutell.com/gd/
    * libpng: http://www.libpng.org/pub/png/pngcode.html
    * zlib: http://www.gzip.org/zlib/
    * JGEP: http://www.ijg.org/

7.      DATABASE

The CMap application relies on a relational database management system
(RDBMS) to store and retrieve data.  If you already have a database
such as MySQL (version 3.23) or Oracle (version 9.x) installed on your
system, you can skip ahead to the next section.  If not and you're
doing this on your own, and aren't a trained DBA, I'd recommend using
MySQL for your database.  It's free, extremely stable, flexible, and
fun.  Oracle is really overkill for such a lightweight application as
this because the code doesn't rely on much of anything from the
database except joins (no transactions, no referential integrity, no
stored procedures, etc.).  If you prefer to use Oracle, you're in luck
because this application was developed concurrently on MySQL and
Oracle.  As of version 0.05, a schema is included which seems to work
with PostgreSQL.  As of version 0.06, CMap seems to play rather well
with PostgreSQL, but testing has not been exhaustive (there seems to
be some problem with the feature correspondence matrix).  One user has
also hacked the schema to work with Sybase, and the code seems to have
no problems.

Note: Oracle 8.x doesn't support ANSI-standard left joins, so some parts
      of the application will fail. If you can't upgrade, then you can
      alter the few SQL statements that cause problems. If you prefer to
      use some other RDBMS, like PostgreSQL or Sybase or whatever, then
      you're still in luck. Much has been done to make the SQL simple
      and portable and extensible. If an SQL statement is giving you
      problems, you can likely create a small module and override the
      statement with one of your own making. See the CODE_OVERVIEW in
      the "docs" directory for more information.

I'll assume that you're going to use MySQL.  If you don't already
have MySQL on your system, you can get everything you need either
from your software vendor or directly from http://www.mysql.com/.
There is a package called "Apache Toolbox" that claims to be able to
install MySQL and Apache and many other things.  It's available at
http://www.apachetoolbox.com/.  Additionally, RedHat Linux offers
RPMs for installing everything you need, Debian GNU/Linux offers
apt-get and their DEB packages, or you can get precompiled binaries
from MySQL for the architecture of your machine.  You may also choose
to install from source, depending on your bent.  There are a number of
freely available GUI (Graphical User Interface) and web-based tools to
help you manage your databases if you want an alternative to MySQL's
command-line tools;  see the MySQL website for more information.  If
you get really stuck, then MySQL AB, the company which develops and
releases MySQL, offers commercial support.

8.      CREATING DATABASE TABLES AND GRANTING PERMISSIONS

Once you've settled on your database of choice and have a working
installation, you need to create the tables that will hold the data for
the comparative maps.  In the "sql" directory, you will find create
scripts for Oracle and MySQL.  If you need to create scripts for a
different database, then write the author for a copy of an upcoming
(RSN) CPAN module, SQL::Translator, specifying which database you're
using.  All efforts will be made to help you convert the schema to
your system.

For MySQL, you can do the following to create the database "CMAP" and
grant appropriate permissions to a user "joe" with the password
"foobar":

    $ cd /usr/local/src/cmap-0.XX/
    $ mysql -uroot -p -e 'create database CMAP'
    $ mysql -uroot -p CMAP < sql/cmap.create.mysql
    $ mysql -uroot -p CMAP -e 'grant select, insert, update, delete 
        on CMAP.* to joe@localhost identified by "foobar"'

In the above example, you'll be required to type the root password
for MySQL.

Note: This is not the same "root" as your system "root." If you never
      set MySQL's "root" password, then just hit <Enter> at the password
      prompt (though I'd be remiss if I didn't suggest you actually
      protect your MySQL root user with a decent password). Be sure to
      remember the user name and password you'll connect to the database
      with as you'll need to place these values into your "cmap.conf"
      file further into the installation process.

After you've granted the user name access to the system, please test
that the login works by logging in.  For example, if you used the
above, try this:

    $ mysql -ujoe -pfoobar CMAP

If you get in, then all is well.  If not, you should consult your
documentation.  

If you're using something other than MySQL, then you should do the
equivalent of creating the tables described in the create scripts in
the "sql" directory and then granting the proper permissions to
whatever user will connect to your database.

9.      INSTALLING PERL 

It would be hard to imagine that a UNIX system wouldn't have some
version of Perl installed.  We need a minimum of Perl 5.6.0 (but 5.6.1
is recommended).  Currently, 5.8.1 is the latest, and this application
seems to work just fine that version.  inspect your version of Perl,
type:

    $ perl -v

On my current system, the output looks like this:

    This is perl, v5.8.0 built for i686-linux

    Copyright 1987-2002, Larry Wall

    Perl may be copied only under the terms of either the Artistic 
    License or the GNU General Public License, which may be found 
    in the Perl 5 source kit.

    Complete documentation for Perl, including FAQ lists, should be
    found on this system using `man perl' or `perldoc perl'. If you have
    access to the Internet, point your browser at http://www.perl.com/,
    the Perl Home Page.

If your version of Perl is OK, you can likely skip ahead to the next
section.  If you have anything 5.00503 or older, you'll need to upgrade
your Perl binary.  Even if your Perl is new enough, you may still want
to consider building a new binary from source if you've never done so.
It's actually fun (in a geeky way), but it also may prove a necessity.
A fair number of mod_perl installations fail because people use broken
RPM versions of Perl.  You can just stick with your installed Perl and
see if it causes problems.  Obviously, upgrading important system
binaries like Perl can cause unforeseen problems.  If you're using an
established machine that is already being used for other tasks,
upgrading Perl could break a lot of things, so you should discuss this
with your sysadmin.  (Of course, you could always build your own Perl
with a PREFIX of something like "/usr/local/cmap" and install
everything you need -- Perl, Apache, CMap, etc. -- there.  This would
then allow you to build everything fresh without disturbing your
existing binaries.  Again, discuss this with your sysadmin.)  If you
are lucky enough to have a free machine to play with, it's nice to
start with a clean slate by building everything from source.  You
should choose what's practical, convenient, and appropriate for you.

If you want to install a new Perl binary, it only takes a few
minutes to download and build.  Here's one way:

    $ su -
    # cd /usr/local/downloads
    # ncftp ftp.cpan.org
    ncftp> cd /pub/CPAN/src
    ncftp> get perl-5.8.0.tar.gz
    ncftp> quit
    # cd ../src
    # tar zxvf ../downloads/perl-5.8.0.tar.gz
    # cd perl-5.8.0
    # sh Configure -de
    # make
    # make install

For better downloads, go to the CPAN (Comprehensive Perl Archive
Network) website (http://www.cpan.org/) and find a mirror near you.  (A
mirror is a machine whose owner is nice enough to provide disk space
and bandwidth so that demand can be distributed among processors and
across geographical areas.  Needless to say, it's usually better to
find a mirror that's near you as long as that machine isn't overloaded.
Just keep trying different machines until you find one with a good,
fast connection to you.)

10.     INSTALLING APACHE AND MOD_PERL

Given that Apache is the most popular web server right now, it's
also likely that you'll already have it installed on your system.
Additionally, mod_perl is becoming a very standard package, and a
number of systems offer pre-built binaries or easy-to-install
packages.  Both RedHat and Debian have such packages, and Windows
users can also install pre-built binaries.  To see if your Apache
binary has mod_perl compiled into it, do the following:

    $ cd /usr/local/apache/bin
    $ ./httpd -l

Here's the output of mine:

    Compiled-in modules:
      http_core.c
      mod_env.c
      mod_log_config.c
      mod_mime.c
      mod_negotiation.c
      mod_status.c
      mod_include.c
      mod_autoindex.c
      mod_dir.c
      mod_cgi.c
      mod_asis.c
      mod_imap.c
      mod_actions.c
      mod_userdir.c
      mod_alias.c
      mod_rewrite.c
      mod_access.c
      mod_auth.c
      mod_proxy.c
      mod_setenvif.c
      mod_perl.c
    suexec: disabled; invalid wrapper /usr/local/apache/bin/suexec

Note: Apache is extremely modular. This is one of its great strengths.
      You can compile a very "high-speed/low-drag" binary with very few
      modules or a great big binary with SSL and PHP and mod_perl and
      more. Your output may vary from the above depending on how the
      binary got there, who installed it, etc. I like to compile Apache
      with mod_rewrite and mod_proxy, which are not standard modules. If
      you don't see this exact module listing, it's probably OK.

If you see "mod_perl.c" in the list, then you can probably skip
ahead to the next section.  If, however, you choose to build Apache
and mod_perl for your system, either because it's not already
installed or because you need to upgrade or because you're a purist
or just because it's fun, you'll be happy to know that it's quite
easy.  Both are available from the Apache mirrors which you can find
by looking on the Apache website, http://www.apache.org/.  Apache
can be found in "/pub/dist/httpd/apache_1.3.27.tar.gz" and mod_perl
can be found in "/pub/dist/perl/mod_perl-1.28.tar.gz."  

Note: This application has only been developed under the Apache and
      mod_perl 1.x trees. Apache and mod_perl 2.x are exciting new
      frontiers for mod_perlers, but it will be a while before this
      application is moved to that architecture. Just stick with the
       1.x trees.

You can install Apache and mod_perl in one fell swoop so long as
you're not interested in compiling in any other modules (e.g., PHP
or SSL, etc.).  To do so, grab the sources for both and unpack them
into a directory so that they're side by side, then follow the
directions included in the INSTALL.apaci file in the mod_perl
distribution.  Here's an example:

Note: The backslashes ("\") above tell the command-line that you are
      continuing the command on a new line. It's not necessary to do
      this. You can just keep typing, but it's easier to see what you're
      doing when you use multiple lines.

    $ su -
    # cd /usr/local/downloads
    # ncftp ftp.tux.org
    ncftp > cd pub/net/apache/dist/httpd
    ncftp > get apache_1.3.27.tar.gz
    ncftp > cd ../perl
    ncftp > get mod_perl-1.28.tar.gz
    ncftp > quit
    # cd /usr/local/src
    # tar zxvf ../downloads/apache_1.3.27.tar.gz
    # tar zxvf ../downloads/mod_perl-1.28.tar.gz
    # cd mod_perl-1.28
    # perl Makefile.PL \
    > APACHE_PREFIX=/usr/local/apache \
    > APACHE_SRC=../apache_1.3.27/src \
    > DO_HTTPD=1 \
    > EVERYTHING=1 \
    > USE_APACI=1
    # make
    # make test
    # make install

The APACHE_PREFIX that I list above is not necessarily where you
should install Apache.  It's a fairly standard location on most
GNU/Linux systems, but where Apache goes is still up to the
discretion of your sysadmin (which is probably you, if you're
reading this).  There's no reason whatsoever that Apache can't be
installed "/var/web/" or "/opt/httpd" (though I might not recommend
installing into "/tmp/" :-).  For the purposes of this document,
"/usr/local/apache" can be substituted with whatever path you
choose.

As an aside, you'll notice that the first command you give to build
most Perl packages is "perl Makefile.PL."  This is the equivalent of
the "configure" script in standard UNIX packages.  This command
tells your Perl binary to figure out what needs to happen in the
"make" process.  Additionally, you'll see that you should "make
test" when installing.  When testing a package, *all* tests should
pass (unless you know that certain failures are OK for your system).
Generally failures in the installation of a Perl module can be
remedied by installing some dependency (usually another Perl module
or a system library).  If tests still fail, it is very important
that you report these errors to the module authors so that they can
be fixed.

If all goes well, you should see a lot of text go whizzing by and then
a big text banner saying "You now have successfully built and installed
the Apache 1.3 HTTP server...." after you type "make install."  If so,
follow the directions and check the configuration files and try to
start Apache like so:  

    $ cd /usr/local/apache/bin
    $ ./apachectl start

If Apache starts up, then open a browser and try to bring up your new
web server.  If not, then you'll have to troubleshoot what your
problem is as there's no need to go further unless all this is
working.  There are a whole host of things you'll need to modify to
get Apache working just right for you, e.g., you will proabably need
to set the ServerName in your httpd.conf to get Apache to not complain
about the syntax of your config.  Unfortunately, thoroughly explaining
everything to watch for in configuring Apache is a bit out of the
scope of this document.  There are many fine venues for seeking help
with Apache, including the docs and mailing lists.  If you have
troubles, please consult those resources to solve your problems.

Finally, verify that mod_perl is indeed compiled into Apache by
executing your new httpd binary with the "-l" flag as shown above and
look for "mod_perl.c."  If all that is good, then move on to the next
section.

11.     INSTALLING PERL MODULES

There are a number of CPAN modules required by the CMap application.
You will likely need to install these prior to installing the CMap
modules as they are not in the standard Perl distribution.  These
modules are listed in the PREREQ_PM hash reference in the Makefile.PL
included with this distribution.  It is possible to install the
CMap application without installing these modules, but you will see a
lot of errors, and, of course, things won't work in the end.  It's best
to use the CPAN shell to install all the modules that Perl complains
about.

Here are brief descriptions of some of the major modules required:

*   Apache::Request:  Also known as "libapreq" because this is a C library,
    this module actually bundles many other modules used, including
    Apache::Request and Apache::Cookie.  The first handles the parsing of
    the request and other miscellaneous bits about communicating with the
    user's browser, while the latter is a nice interface to reading and
    setting cookies, which is important as user preferences are stored in
    cookies.  Both have their interfaces modeled after Lincoln Stein's
    CGI.pm module.

*   Class::Base:  A very nice class-building module written by Andy
    Wardley, the author of Template Toolkit.  All the CMap modules inherit
    from Class::Base.

*   Config::General:  A module for reading configuration files, this is
    what parses "cmap.conf."

*   DBI: The Perl Database Interface, this module standardizes the way
    that Perl talks to databases.  The specifics of how to communicate
    with particular databases is handled by lower-level drivers.  This is
    one of the reasons why it was relatively easy to write this
    application to talk to either MySQL or Oracle -- only the SQL has to
    be customized for each vendor's product, but the way the code talks to
    the database is the same.

*   DBD::mysql, DBD::Oracle, DBD::*: Since this application works with
    both a number of different databases, I don't bother specifying
    which DBD driver to install. Therefore it is up to you to install
    DBD::mysql or DBD::Oracle (or whatever) yourself, then add it to
    your "perlstartup.pl" (or equivalent).

    Whichever database you choose to use, it is largely up to you to
    figure out how to get the driver to work. Most DBD drivers require
    some sort of client software supplied by the vendor to be installed
    locally. If, for instance, you choose to use Oracle, this
    installation is likely to be quite a headache if you do not have an
    administrative background, so you may want to get some help from an
    experienced systems administrator. I've included fairly detailed
    instructions for getting everything to work with MySQL because it's
    my favorite database, and it's free for you to use. If you're not
    going to use MySQL, you'll have to modify the general ideas
    (creating the database and table, granting user permissions, etc.)
    to work with your database.

*   File::MkTemp:  This module is responsible for creating the temporary
    files where the map images are written.

*   GD:  Lincoln Stein's Perl module that interfaces with Paul Boutell's
    libgd system library which actually does the drawing of the maps.

*   IO::Tee: This module mimics the "tee" utility of UNIX allowing
    simulaneous streaming to multiple outputs (terminals, files, etc.)

*   Template:  The Template Toolkit, this module handles the substitutions
    made in the template files to create the HTML displayed to browsers.

*   Time::Object, Time::ParseDate: Two modules for dealing with dates.

If you need to install any of these Perl modules, I'd really recommend
you use the CPAN shell, a convenient package that automates the
downloading and building of modules.  The CPAN shell can also can
recursively install all module dependencies automatically, which is a
very nice feature.  To use the CPAN shell, type the following (as
root):

    # perl -MCPAN -e shell

If you're curious, the "-M" flag tells Perl to use a particular
module, in this case "CPAN.pm," and the "-e" flag tells Perl to execute
some code.  In this case, we're executing the command "shell," which
is exported by CPAN.pm.  If you want to see if any of the above
modules is already installed on your system, simply substitute the
name of the module where "CPAN" occurs above, e.g., for the
Class::Base module, you would do the following:

    $ perl -MClass::Base -e 'print "OK\n"'

If Perl is able to load Class::Base, you'll see "OK"; otherwise, you will
certainly know about it, and you could do this (as root):

    # perl -MCPAN -e 'install Class::Base'

The first time you use the CPAN shell, you will have to answer a few
questions mostly concerned with choosing a mirror close to you and
where certain important system binaries are (like "gzip," "ncftp,"
"tar," etc.).  Generally you can just keep hitting <Return> to
accept the defaults presented in square brackets.

Occasionally a module may not install properly via the CPAN shell,
or perhaps it is not available on CPAN or the installation process
wants to upgrade your version of Perl to the latest (and you don't want
that).  In that case, you can install the module in much the same way
that you install system binaries.  I'd recommend downloading the source
into "/usr/local/downloads" and then untarring into "/usr/local/src."
Execute "perl Makefile.PL; make; make test; make install" and you're
generally all done.  If the module requires another module, you'll need
to track that down (try "http://search.cpan.org"), install it, then
return to installing the first one.  After satisfying several
dependencies on your own, you'll begin to appreciate all the automation
the CPAN shell gives you.

Note: Don't forget that the versions of GD.pm and libgd need to match up
      (either both 1.x or both 2.x). CPAN will always try to install the
      latest version of a module (so 2.x of GD.pm). If your system has a
      1.x libgd (look for something like "libgd.so.1.8.4" in "/usr/lib"
      or "/usr/local/lib") and you use CPAN to install GD.pm, you will
      have problems. In this case, it will be much easier to grab the
      source for version 1.x of GD.pm and install it by hand.

12.     INSTALLING THE CMAP PERL MODULES

To install the CMap modules included in this package, you can either
use the normal installation routine to place the modules into Perl's
system-wide library path, or you can put the modules into a directory
of your own choosing.  Unless you'd like to have reasons to do the
latter, I'd recommend choosing the first way.  Here's how to do both:

1)  Execute the following commands in the directory created by
    untarring the CMap distribution:

    $ perl Makefile.PL
    $ make
    # make install

    You will be asked several questions, such as where to place the main
    configuration file, the templates, the "cmap_admin.pl" script, and
    an HTML style sheet. You can place them in any valid directory on
    your system, and you will be provided with reasonable defaults. If
    you don't wish to have the installer put file in a directory (e.g.,
    you want to use your own style sheet), answer "no" to the default
    choice and "q" when prompted for a path. All the questions are
    optional, so you could do this for all of them. If a file of the
    same name exists in the installation directory for anything but the
    templates, you will be prompted whether to overwrite this file.

    You can also specify the answers to the installation questions by
    providing them as KEY=VALUE arguments to "perl Makefile.PL." Give
    "--help" as the argument to Makfile.PL to find out more about this.
    Lastly, you can provide the argument "PREFIX" to have everything
    installed in one location, e.g., "/usr/local/cmap."

    As you make your choices, two key files will receive crucial updates:

    Bio::GMOD::CMap::Constants
        This file will have the value of the "CONFIG_FILE" altered
        to match CONF_DIR.

    conf/cmap.conf
        This file will have the value of "template_dir" altered 
        to match TEMPLATE_DIR.

2)  Manually place the contents of "conf," "lib," "bin," and
    "templates" into directories of your choosing like so:
    
    conf/cmap.conf
        Copy to a location readable by all scripts and processes
        that will need to read this file (command-line scripts run
        by users and the httpd process) as this file contains 
        database connection info and other runtime options.  Be sure 
        to change "template_dir" yourself to reflect the location of
        the CMap templates.

    conf/cmap.css
        This is the cascading style sheet used by the maps. Copy to a
        location where a web browser can retrieve, such as a
        "stylesheets" directory. You can, of course, use your own HTML
        stylesheet; if you choose to do this, just update "cmap.conf"
        with the URI of your stylesheet.

    lib
        Copy to a location visible to all Perl/mod_perl processes. Be
        sure to update your PERL5LIB environment variable and the
        "perlstartup.pl" script to reflect your custom installation. I
        like to put custom libraries used by Apache under
        "/usr/local/apache/lib/perl" (assuming, of course, that you
        might have libraries for Java and Python and whatever else
        tickles your fancy).  
    
        Note: Be sure to update Bio::GMOD::CMap::Constants to have
              "CONFIG_FILE" point to the correct location of your
              configuration file ("cmap.conf") or things won't work!

    bin
        Copy "cmap_admin.pl" to a location suitable for the execution by
        the curator(s) of your data, such as "/usr/local/bin/". If you
        are the only one who will run the script, perhaps place it into
        $HOME/bin.

    templates
        Copy to a location readable by your mod_perl server. I would
        recommend putting the templates into
        "/usr/local/apache/templates/cmap."

    And why might you want to put the files into your own library path
    instead of Perl's? Well, if you plan on hacking around with the
    source, you might rather not have them installed in an inconvenient
    directory and owned by root, which they will be if you choose the
    first. Of course, if you really plan on hacking around, I would hope
    that you would consider doing a CVS checkout so you could contribute
    your work back to the project! More on that later.

Either way you install, you'll need to be sure to edit your
"cmap.conf" file to use the correct database connection information.
(If you forget the location of the configuration file and you
installed via option #1, then you can look in the "cmap_install.conf"
file in the source directory of the CMap application.)  The database
section is at the top of the file.  Only the first two options
("database" and "template_dir") *must* be set.  Everything else has
reasonable defaults if nothing is specified in this file.  I would
encourage you to look around this file and change things to affect the
look and feel of your site.  If you don't like a change, comment out
the line by placing a pound sign ("#") at the beginning of the line.
Remember to restart Apache to see the changes.

If you are upgrading from an earlier version of CMap, I would caution
your to be careful of how you install the latest "cmap.conf."  You'll
probably want to copy your original to a backup location, then copy
this file over manually and "diff" the two.  Most likely, you won't
need to make too many changes to the new one to get things working the
way you had them before.

13.     CONFIGURING APACHE

After installing Apache, mod_perl, and all the necessary modules,
you're now ready to configure Apache.  Two fragments of files are
included in the "conf" directory of this distribution to help you do
this: "httpd.conf" and "perlstartup.pl."  The first of these files
contains all the additions you should make to your own httpd.conf in
order to configure the Apache environment and to set up the handlers
for the CMap application.  The second file, typically called something
like "perlstartup.pl" (but you can call it whatever you like) is used
to let Apache know about the modules it will use in its lifetime, and
is placed in the same directory as the httpd.conf.  (Most likely, a
startup file like this won't exist unless you were already using
mod_perl and were pre-loading modules.  If this is the case, you'll
just create one anew or copy the one from "conf" to the desired
location.)  The parent Apache process will parse this file and include
all the modules in each child process, further enhancing the
performance of the application.

Note: All the files in Apache's "conf" directory are very important and
      sensitive, so it's best to have everything be owned and writable
      only by root. The startup file will be executed as root, so this
      could represent an easy system compromise were a non-root user
      able to write to the file.

Here are brief descriptions of the additions you'll make to httpd.conf so you
can intelligently edit you own entries.

*   PerlRequire /path/to/perlstartup.pl

    This is the location of the file that lists all your Perl modules.
    Generally the path would be "/usr/local/apache/conf/perlstartup.pl."

*   Alias /cmap/images /tmp/cmap_cache

    This is the directory where the application will write the temporary
    images created for each request.  Apache will directly serve the
    images from this cache.  If you do not define a directory, then the
    default ("/tmp/cmap_cache") will be created for you on the first
    request.  This directory will be owned by the user and group of the
    httpd process and will have 0700 as its permissions .  

    If you do not want to use "/tmp/cmap_cache" for your images, you can
    specify a different directory, perhaps something in your "/var"
    directory or something on a partition separate from your web server.
    If you create a directory on your own, I'd recommend making the
    directory owned by root, and preventing anyone but the web server's
    uid to alter any file it creates. To do this, "su" to root and issue
    the following commands:

        # mkdir /path/to/images
        # chown root:root /path/to/images 
        # chmod 4777 /path/to/images 

    Where "/path/to/images" is probably something like
    "/var/cmap_cache." Whether you create the cache directory or not,
    you will need to alias it so that Apache will know where to find the
    images. So, let's say that you decide to put your images into
    "/var/cmap_cache" and that you'd like to reference those images
    through a web browser as "/cmap/images," you'll need to edit the
    "Alias" above in your httpd.conf to reflect the default value or
    your own choice.

    I'd probably recommend against placing the images directly into your
    DocumentRoot as the space taken by the images is completely dependent
    upon the amount of traffic your site gets.  You could conceivably fill
    your primary disk partition if you either never cleaned out old images
    or someone launched some sort of DoS attack on you.  It would be
    better to place them into a directory on a separate partition, like
    "/var," which is usually able to handle such variable directories.
    Where ever you put your images and however you alias them, be sure that
    the "<img>" tag in the "cmap_viewer.tmpl" template reflects the same
    path as your Alias.  (Of course, you won't have to change anything
    in the templates if you use the default of "/cmap/images.")

*   <Location> directives

    You'll add two directives to your httpd.conf, the second of which is
    only necessary if you wish to password-protect your administrative
    interface (which I'm sure you will).  An actual directory called
    "cmap" can exist in your DocumentRoot, but there's no reason for it.
    You may want to place the CMap style sheet there, but it's probably
    just as easy to create a site-wide "stylesheets" directory.  However,
    the code is written in such a way that any files in a "/cmap"
    directory will be properly served by Apache.

    To protect the administrative interface with a password, you'll need
    to use the "htpasswd" program that is distributed with Apache.  It is
    usually located in the same directory as the "httpd" binary
    (e.g., "/usr/local/apache/bin").  If you've never used htpasswd
    before, you can get the quick synopsis by giving it a single argument
    of "-h" or "--help."  You should read the help to make sure that you
    create your password file correctly (making sure not to overwrite an
    existing file!), but this will probably work just fine for you:

        $ su -
        # cd /usr/local/apache
        # mkdir passwd
        # ./bin/htpasswd -c /usr/local/apache/passwd/cmap admin

    In the last command, the last argument is the user name which you'll
    use when prompted by your web browser to see the admin tool, and the
    argument before that is the name of the new password file that will be
    created by the "-c" argument.  If the file already exists, then don't
    use "-c."

14.     STARTING APACHE

Now see if Apache like what you've done by typing the following commands:

    $ su -
    # cd /usr/local/apache/bin
    # ./apachectl configtest

If you see "Syntax OK," then restart Apache:

    # ./apachectl stop
    # ./apachectl start

Now it's time to see if the basic installation worked.  Open up a web
browser and point it to your new CMap installation:

    http://my.server.org/cmap

If your web server doesn't have a name that resolves into an IP address
for you, then you can just use the IP address instead of a name. You
should see a page welcoming you to the genetic and comparative maps
application.  If you don't see anything or you get an error, check your
error log (whatever your "ErrorLog" directive is set to in your
httpd.conf), which is most likely "/usr/local/apache/logs/error_log."

15.     STARTING APACHE ET AL. ON BOOT

Should your system ever go down for any reason (e.g., crash or
reboot), you'll probably want all your services to come back up when
the machine boots.  UNIX-type systems can vary quite a bit in how
you determine what comes up at boot and in what order, but on
typical GNU/Linux systems, you can simply place start scripts in a
directory like "/etc/rc.d/init.d" and then create symbolic links
into the "rcX.d" directory where the "X" represents your default
runlevel (usually 2 or 3 for a server).  Here's how you could start
Apache at boot on a RedHat system with a default runlevel of "3":

    $ su -
    # cd /etc/rc.d/init.d
    # ln -s /usr/local/apache/bin/apachectl ./httpd
    # cd /etc/rc.d/rc3.d/
    # ln -s ../init.d/httpd ./S99httpd
    # ln -s ../init.d/httpd ./K99httpd

The "SXX" and "KXX" prefix are conventions used to indicate "start"
and "kill" scripts.  The number that occurs after the "S" or "K"
indicates the relative order in which the script.  All "S" scripts are
passed a command of "start" when the system is booting and are
processed in alphabetical order, so "S10abc" is started before
"S10def" which is processed before "S11ghi," etc.  The "K" scripts are
given an argument of "stop."  Generally, if you start a service in
this manner, you should cleanly shut it down with a kill script
rather than just letting the process die with the final kill signals
the operating system sends out just before shutdown.

MySQL has its own scripts to make sure it starts up on boot.  You
should follow the directions appropriate for your system.

16.     CRONTAB TO REMOVE OLD IMAGES

The map images will only be used for one request, so you'll need to
include some way to clear out old images.  A simple cron job will do
the trick, so we'll need to add a line root's crontab.  You edit a
crontab by typing "crontab -e" on the command line.  If you are "joe"
when you type this, you'll be editing your own crontab.  Since your
normal login won't likely have the permissions necessary to remove the
old images, you should su to root and execute "crontab -e".  

The "-e" says that you want to "edit" your crontab using an editor.
On most GNU/Linux systems, crontab will use the value of whatever
you've set as in your environment as your EDITOR or VISUAL.  If
nothing is set, then crontab will use "vi," (the VIsual editor,
progeny of "ex").  vi is an interesting editor;  it requires you
understand "command" and "insert" modes, and is usually only used by
somewhat hard-core UNIX-y people.  Unless you're already familiar with
vi, I'd suggest you set your EDITOR to something like "pico," a very
intuitive editor and then run crontab.  How you set your environment
will depend on the shell you're using.  I like bash (GNU's Bourne
Again SHell), so I edit my "~/.bashrc" file, add "export
EDITOR=/usr/bin/pico," then source the file with "source ~/.bashrc."
I can see that it worked by typing "echo $EDITOR" on the command line.

However you choose to edit the file, you'll need to paste or type the
following lines:

    # clear out old CMap images
    # added by Joe User <juser@foo.com>
    0 0 * * *  find /tmp/cmap_cache/ -type f -mtime +1 -exec rm -rf {} \;

Of course, you'll want to change the "Joe User..." part to reflect
your own name and e-mail address.  Also, if you choose to store your
map images in a location other than the default of "/tmp/cmap_cache,"
then you'll need to change the above directory to match your choice.
When you save the file, crontab will automatically exit.  If all went
well, you should see a message saying that a new crontab was
installed.

If you're curious, a "crontab" is simply a file which uses a particular
syntax to describe to the "cron" daemon events which should happen at some
interval.  (And a "daemon" is a program that runs continuously in the
background on a system that does function, like listening for HTTP
requests [httpd] or FTP requests [ftpd] or telnet requests [telnetd], etc.
You see the pattern:  usually the service and a "d" [for "daemon"] makes
up the name.)  "Crond" (pronounced "cron-dee," always just say "-dee"
for the "d") sits around waiting to do something on someones behalf.  As
you might imagine, the "cron" part implies the time aspect of the program.
So, if you wanted to download a file every month from an FTP site to see
if it had changed, you might see up a crontab to tell crond to do just
that.  You edit your crontab by saying "crontab -e" (for "edit"), then
enter a line that describes to crond when to run the command and what the
command is.  Yours might look like this:

    # download the foo.dat file
    0 0 1 * * <ftp command>

From the man(5) page for crontab (which you get by typing "man 5 crontab"
on my GNU/Linux system), you get this:

       cron(8) examines cron entries once every minute.

       The time and date fields are:

              field          allowed values
              -----          --------------
              minute         0-59
              hour           0-23
              day of month   1-31
              month          1-12 (or names, see below)
              day of week    0-7 (0 or 7 is Sun, or use names)

Every minute "crond" looks around to see if it's time to do something
by looking at the first 5 fields of each line in everybody's crontabs.
Stars mean "all" and numbers mean, well, the number.  So the above
would tell crond to run <ftp command> (whatever that might be) on the
zero-th minute of the zero-th hour (i.e., midnight) of the first day of
every month, regardless of the day of week.  It's a quirky syntax, but
pretty powerful.  I added a comment to the crontab above with the hash
at the beginning of the first line -- that's just being polite.  It's
always a good idea to comment on what you're doing in a system-wide
file like root's crontab so you and everyone else knows what each
command does.  Be sure to put in your own name and e-mail address.  The
whole command (starting with the "0") should go on one line.  

Note: Some UNIXs may have a slightly different cron format. Check
      your man page!

17.     TEMPLATES

Some of the templates may contain language specific to the Gramene
project (e.g., "matrix.tmpl").  You may wish to scan all your pages
and remove any language that doesn't pertain to your data.  In fact,
it's a great idea for you to customize the templates to the types of
data you wish to highlight or explain.

18.     CVS ACCESS

If you'd like to install the very latest (which is not necessarily
guaranteed to work!), then you'll want to checkout the "cmap" project
from the anonymous CVS repository at SourceForge.  See the project
homepage for instructions:

    http://gmod.sourceforge.net/cmap

19.     COMMENTS

If you have questions or comments about this document, please write
the CMap development mailing list at
"gmod-cmap@lists.sourceforge.net."  Please consider joining the list
in order to stay up on the latest in the development as well as to
contribute your opinions as to the direction that CMap takes in the
future.

20.     LET US KNOW!

Please consider allowing the GMOD project advertise your use of our
code.  If you have a publicly accessible installation of CMap, we
would very much like to provide a link from the GMOD website to it!

__END__
