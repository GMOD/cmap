-- 
-- Created by SQL::Translator::Producer::SQLite
-- Created on Wed Mar 12 09:26:28 2008
-- 
BEGIN TRANSACTION;


--
-- Table: cmap_attribute
--
CREATE TABLE cmap_attribute (
  attribute_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  table_name varchar(30) NOT NULL DEFAULT '',
  object_id int(11) NOT NULL DEFAULT '0',
  display_order int(11) NOT NULL DEFAULT '1',
  is_public tinyint(4) NOT NULL DEFAULT '1',
  attribute_name varchar(200) NOT NULL DEFAULT '',
  attribute_value text NOT NULL
);

CREATE INDEX table_name_cmap_attribute on cmap_attribute (table_name, object_id, display_order, attribute_name);

--
-- Table: cmap_correspondence_evidence
--
CREATE TABLE cmap_correspondence_evidence (
  correspondence_evidence_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  correspondence_evidence_acc varchar(30) NOT NULL DEFAULT '',
  feature_correspondence_id int(11) NOT NULL DEFAULT '0',
  evidence_type_acc varchar(30) NOT NULL DEFAULT '0',
  score double(8,2) DEFAULT NULL,
  rank int(11) NOT NULL DEFAULT '0'
);

CREATE INDEX feature_correspondence_id_cmap on cmap_correspondence_evidence (feature_correspondence_id);
CREATE UNIQUE INDEX correspondence_evidence_acc_cm on cmap_correspondence_evidence (correspondence_evidence_acc);

--
-- Table: cmap_feature
--
CREATE TABLE cmap_feature (
  feature_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  feature_acc varchar(30) NOT NULL DEFAULT '',
  map_id int(11) NOT NULL DEFAULT '0',
  feature_type_acc varchar(30) NOT NULL DEFAULT '0',
  feature_name varchar(32) NOT NULL DEFAULT '',
  is_landmark tinyint(4) NOT NULL DEFAULT '0',
  feature_start double(11,2) NOT NULL DEFAULT '0.00',
  feature_stop double(11,2) DEFAULT NULL,
  default_rank int(11) NOT NULL DEFAULT '1',
  direction tinyint(4) NOT NULL DEFAULT '1'
);

CREATE INDEX feature_name_cmap_feature on cmap_feature (feature_name);
CREATE INDEX feature_id_map_id_cmap_feature on cmap_feature (feature_id, map_id);
CREATE INDEX feature_id_map_id_start_cmap_f on cmap_feature (feature_id, map_id, feature_start);
CREATE INDEX map_id_cmap_feature on cmap_feature (map_id);
CREATE INDEX map_id_feature_id_cmap_feature on cmap_feature (map_id, feature_id);
CREATE UNIQUE INDEX feature_acc_cmap_feature on cmap_feature (feature_acc);

--
-- Table: cmap_feature_alias
--
CREATE TABLE cmap_feature_alias (
  feature_alias_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  feature_id int(11) NOT NULL DEFAULT '0',
  alias varchar(255) DEFAULT NULL
);

CREATE INDEX feature_id_cmap_feature_alias on cmap_feature_alias (feature_id);
CREATE INDEX alias_cmap_feature_alias on cmap_feature_alias (alias);
CREATE UNIQUE INDEX feature_id_2_cmap_feature_alia on cmap_feature_alias (feature_id, alias);

--
-- Table: cmap_feature_correspondence
--
CREATE TABLE cmap_feature_correspondence (
  feature_correspondence_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  feature_correspondence_acc varchar(30) NOT NULL DEFAULT '',
  feature_id1 int(11) NOT NULL DEFAULT '0',
  feature_id2 int(11) NOT NULL DEFAULT '0',
  is_enabled tinyint(4) NOT NULL DEFAULT '1'
);

CREATE INDEX feature_id1_cmap_feature_corre on cmap_feature_correspondence (feature_id1);
CREATE INDEX cmap_feature_corresp_idx_cmap_ on cmap_feature_correspondence (is_enabled, feature_correspondence_id);
CREATE UNIQUE INDEX feature_correspondence_acc_cma on cmap_feature_correspondence (feature_correspondence_acc);

--
-- View: cmap_correspondence_lookup
--
CREATE VIEW cmap_correspondence_lookup AS
  SELECT
    cmap_feature_correspondence.feature_id1 AS feature_id1, 
    cmap_feature_correspondence.feature_id2 AS feature_id2,
    cmap_feature_correspondence.feature_correspondence_id AS feature_correspondence_id,
    cf1.feature_start AS feature_start1,
    cf2.feature_start AS feature_start2,
    cf1.feature_stop AS feature_stop1,
    cf2.feature_stop AS feature_stop2,
    cf1.map_id AS map_id1,
    cf2.map_id AS map_id2,
    cf1.feature_type_acc AS feature_type_acc1,
    cf2.feature_type_acc AS feature_type_acc2
   FROM cmap_feature_correspondence 
   JOIN cmap_feature cf1
     ON cmap_feature_correspondence.feature_id1 = cf1.feature_id
   JOIN cmap_feature cf2
     ON cmap_feature_correspondence.feature_id2 = cf2.feature_id
UNION ALL
  SELECT
    cmap_feature_correspondence.feature_id2 AS feature_id2, 
    cmap_feature_correspondence.feature_id1 AS feature_id1,
    cmap_feature_correspondence.feature_correspondence_id AS feature_correspondence_id,
    cf1.feature_start AS feature_start1,
    cf2.feature_start AS feature_start2,
    cf1.feature_stop AS feature_stop1,
    cf2.feature_stop AS feature_stop2,
    cf1.map_id AS map_id1,
    cf2.map_id AS map_id2,
    cf1.feature_type_acc AS feature_type_acc1,
    cf2.feature_type_acc AS feature_type_acc2
   FROM cmap_feature_correspondence 
   JOIN cmap_feature cf1
     ON cmap_feature_correspondence.feature_id2 = cf1.feature_id
   JOIN cmap_feature cf2
     ON cmap_feature_correspondence.feature_id1 = cf2.feature_id;

--
-- Table: cmap_map
--
CREATE TABLE cmap_map (
  map_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  map_acc varchar(30) NOT NULL DEFAULT '',
  map_set_id int(11) NOT NULL DEFAULT '0',
  map_name varchar(32) NOT NULL DEFAULT '',
  display_order int(11) NOT NULL DEFAULT '1',
  map_start double(11,2) DEFAULT NULL,
  map_stop double(11,2) DEFAULT NULL
);

CREATE INDEX map_set_id_index_cmap_map on cmap_map (map_set_id);
CREATE UNIQUE INDEX map_acc_cmap_map on cmap_map (map_acc);
CREATE UNIQUE INDEX map_id_cmap_map on cmap_map (map_id, map_set_id, map_name, map_acc);

--
-- Table: cmap_map_set
--
CREATE TABLE cmap_map_set (
  map_set_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  map_set_acc varchar(30) NOT NULL DEFAULT '',
  map_set_name varchar(64) NOT NULL DEFAULT '',
  map_set_short_name varchar(30) NOT NULL DEFAULT '',
  map_type_acc varchar(30) NOT NULL DEFAULT '0',
  species_id int(11) NOT NULL DEFAULT '0',
  published_on date DEFAULT NULL,
  display_order int(11) NOT NULL DEFAULT '1',
  is_enabled tinyint(4) NOT NULL DEFAULT '1',
  shape varchar(12) DEFAULT NULL,
  color varchar(20) DEFAULT NULL,
  width int(11) DEFAULT NULL,
  map_units varchar(12) NOT NULL DEFAULT '',
  is_relational_map tinyint(11) NOT NULL DEFAULT '0'
);

CREATE INDEX cmap_map_set_idx_cmap_map_set on cmap_map_set (is_relational_map, is_enabled, species_id, display_order, published_on, map_set_short_name);
CREATE UNIQUE INDEX map_set_acc_cmap_map_set on cmap_map_set (map_set_acc);
CREATE UNIQUE INDEX map_set_id_cmap_map_set on cmap_map_set (map_set_id, species_id, map_set_short_name, map_set_acc);

--
-- Table: cmap_next_number
--
CREATE TABLE cmap_next_number (
  table_name varchar(40) NOT NULL DEFAULT '',
  next_number int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (table_name)
);


--
-- Table: cmap_species
--
CREATE TABLE cmap_species (
  species_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  species_acc varchar(30) NOT NULL DEFAULT '',
  species_common_name varchar(64) NOT NULL DEFAULT '',
  species_full_name varchar(64) NOT NULL DEFAULT '',
  display_order int(11) NOT NULL DEFAULT '1'
);

CREATE INDEX acc_id_species_id_cmap_species on cmap_species (species_acc, species_id);
CREATE UNIQUE INDEX species_acc_cmap_species on cmap_species (species_acc);

--
-- Table: cmap_xref
--
CREATE TABLE cmap_xref (
  xref_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  table_name varchar(30) NOT NULL DEFAULT '',
  object_id int(11) DEFAULT NULL,
  display_order int(11) NOT NULL DEFAULT '1',
  xref_name varchar(200) NOT NULL DEFAULT '',
  xref_url text NOT NULL
);

CREATE INDEX table_name_cmap_xref on cmap_xref (table_name, object_id, display_order);

--
-- Table: cmap_map_to_feature
--
CREATE TABLE cmap_map_to_feature (
  map_id int(11) NOT NULL DEFAULT '0',
  map_acc varchar(30) NOT NULL DEFAULT '',
  feature_id int(11) NOT NULL DEFAULT '0',
  feature_acc varchar(30) NOT NULL DEFAULT ''
);

CREATE INDEX map_id_cmap_map_to_feature on cmap_map_to_feature (map_id);
CREATE INDEX feature_id_cmap_map_to_feature on cmap_map_to_feature (feature_id);

--
-- Table: cmap_transaction
--
CREATE TABLE cmap_transaction (
  transaction_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  transaction_date date DEFAULT NULL
);


--
-- Table: cmap_commit_log
--
CREATE TABLE cmap_commit_log (
  commit_log_id INTEGER PRIMARY KEY NOT NULL DEFAULT '0',
  species_id int(11) NOT NULL DEFAULT '0',
  species_acc varchar(30) NOT NULL DEFAULT '',
  map_set_id int(11) NOT NULL DEFAULT '0',
  map_set_acc varchar(30) NOT NULL DEFAULT '',
  map_id int(11) NOT NULL DEFAULT '0',
  map_acc varchar(30) NOT NULL DEFAULT '',
  commit_type varchar(200) NOT NULL DEFAULT '',
  commit_text varchar(200) NOT NULL DEFAULT '',
  commit_object text NOT NULL,
  commit_date date DEFAULT NULL,
  transaction_id int(11) NOT NULL DEFAULT '0'
);

--
-- View: cmap_correspondence_matrix
--
CREATE VIEW cmap_correspondence_matrix AS
  SELECT map1.map_acc         AS reference_map_acc,
         map1.map_name        AS reference_map_name,
         ms1.map_set_acc      AS reference_map_set_acc,
         s1.species_acc       AS reference_species_acc,
         map2.map_acc         AS link_map_acc,
         map2.map_name        AS link_map_name,
         ms2.map_set_acc      AS link_map_set_acc,
         s2.species_acc       AS link_species_acc,
         COUNT(f2.feature_id) AS no_correspondences
    FROM cmap_species s1 
    JOIN cmap_map_set ms1              ON ms1.species_id = s1.species_id
    JOIN cmap_map map1                 ON map1.map_set_id = ms1.map_set_id
    JOIN cmap_feature f1               ON f1.map_id = map1.map_id
    JOIN cmap_correspondence_lookup cl ON cl.feature_id1 = f1.feature_id
    JOIN cmap_feature f2               ON f2.feature_id = cl.feature_id2
    JOIN cmap_map map2                 ON map2.map_id = f2.map_id
    JOIN cmap_map_set ms2              ON ms2.map_set_id = map2.map_set_id
    JOIN cmap_species s2               ON s2.species_id = ms2.species_id
    JOIN cmap_feature_correspondence fc 
      ON fc.feature_correspondence_id = cl.feature_correspondence_id
   WHERE ms1.is_relational_map = 0
     AND cl.feature_correspondence_id = fc.feature_correspondence_id
     AND fc.is_enabled=1
     AND ((f2.map_id <> f1.map_id AND ms2.is_relational_map = 0)
         OR ms2.is_relational_map = 1)
  GROUP BY map1.map_acc, map2.map_acc;

COMMIT;
